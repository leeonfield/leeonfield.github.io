<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leeon Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lijundong.com/"/>
  <updated>2017-02-12T06:38:15.000Z</updated>
  <id>http://lijundong.com/</id>
  
  <author>
    <name>leeon</name>
    <email>leeonfield@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于学习的反思</title>
    <link href="http://lijundong.com/think-about-learning/"/>
    <id>http://lijundong.com/think-about-learning/</id>
    <published>2017-02-10T07:48:11.000Z</published>
    <updated>2017-02-12T06:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>请告诉我，你的想法 ？</p>
<a id="more"></a>
<p>年初到现在看了几本书，从原理层面重新理解很多知识点，效果胜过之前看过的任何一篇 Blog。有所感，初拟的题目是「关于技术学习的思考」，后觉不妥，这样的反思不应止于技术。</p>
<p>进入大学之前，所有人都告诉我“你该考个好大学”，包括我自己，但是没人给出理由，同样包括我自己，我年复一年的准备就是为了那场考试，通过考试，进了大学，但从那之后，之前鼓励我考大学的人再没告诉我下一步该怎么走，如果你去问他们，他们不奢望你拿奖学金，但可能会鼓励你去考研，不可否认，“努力学习，拿高绩点，考研去一个更好的学校”，就是我进大学时对于四年的“规划”，美其名曰“规划”，我并不知道考研时为了什么，也不知道考研之后的日子该做什么，没课的时间就去图书馆自习做题，准时睡觉起床，偶尔去跑步，我只是换了一个环境继续着高中的生活，身后被一只无形的手推着走，终日处于一种被动无意识状态。</p>
<p>也许是生活太过枯燥，正好碰到学校的 ACM，于是开始刷题的日子，渐渐乐在其中，听前辈讲题，逛 CSDN，看别人的解题代码，也不求甚解，只浮于看到 Accept 的快感，就这样混了一年。因为选择进入机器人小组，结束了刷题的生活。小组的唯一任务就是准备每年的 Robocon，比赛强迫成员必须尽快的产出，因为对硬件一窍不通，遇到问题总是先去找现成的代码，整日地逛论坛，免费的论坛找不到，就和黄彪凑了 60 大洋买了 amoBBS 的会员，继续找，在网上找单片机视频教程，对着电脑看到昏睡，醒来继续看，仍是不求甚解，因为负责的视觉模块始终无进展，选择退出小组。后来接触 web，跟着 w3cSchool 的教程，又开始了自 high，看了一个月的教程，仍停留在写单页的水平，跟着粉丝日志做 express 开发，跟着 imooc 的视频做微信开发，不求甚解，遇到问题就去找答案，找到能用的答案，能用就行，不求甚解。似乎回到了为了 Accept 整日刷题的状态，我整日都在编码，但技术始终不得精进，终于有一天意识到一个很残酷的事实，我做的只是复制粘贴，一只都是原地踏步，忙碌的只是表象，只是一种主动的无意识状态而已。</p>
<p>我时常在想，一个优秀的工程师，应该像艺术家般，在代码中加入自己的思想，而现在的我仍只是在临摹，距离创作还有遥远的距离，但那是我的追求。BBS、Blog 存在的意义，更偏向经验的传播，在我需要时告诉我 How，但是夜深人静时，艺术家的梦再次扣上心扉，我想去追寻 What 和 Why 时，要探究技术的本质时，还是要去书中寻找。</p>
<p>知识付费在去年开始兴起，以值乎和分答为代表的付费问答，以得到为代表的付费订阅，随后兴起了付费社群。知识付费无疑空前利好创作者，他们可以生活的更好，这也是我希望看到的。不过对于其中的产品，用户还是要有准确的定位。<br>我有过一段时间很喜欢李笑来的观点，包括他的 「把时间当作朋友」，甚至把很多观点奉为圭臬，当时看的时候觉得干货满满，他是我了解的最先做付费社群的人，价格也很贵，崇尚终生学习，并名其新生大学，我一度想过存钱，加入那个社群，后来因为没存到钱（😂），不了了之，偶尔可以看到社群中的文章分享，觉得文风和「时间」一个味道，再读「时间」，不仅没了当初的激动之感，反而感觉到了浓浓的鸡汤风。后来看到他的知乎 live、学费数万元的全栈培训，也就释然了。相比于做比特币投资，我相信他更适合职业割韭菜。</p>
<p>我以技术学习的名义加入过很多技术交流群，结果是接下来的日子，因为群消息太吵我把这些群一个个地屏蔽了，我几乎没在群里说过话，也不怎么看消息，群里面讨论的话题太杂乱，群友水平参差不齐，交流效率奇差。我的初衷是，我会在群里获得技术提升，每个人都是这样的想法，这个群基本就废了，没人愿意输出，或者是有输出的能力。所以在面对一个产品之前，首先应该思考，你在其中的角色是什么？你想得到什么？这一点完全适用于今天的微信社群、小密圈、知乎 live、得到等产品。</p>
<p>知识付费一直存在，我前文提到的 amoBBS 也可以算是付费社群，只是市场环境更好了，产品的形态更多样化，本质不分轩轾，只不过目前的市场，职业割韭菜的人越来越多，这是必经的过程，被收割的群体本着学习的目的前去，交了学费，学了一招防骗术。</p>
<p>交再多的钱，也不可能变得更有思想，这条路上没有捷径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;请告诉我，你的想法 ？&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://lijundong.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="学习" scheme="http://lijundong.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="web" scheme="http://lijundong.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 变量提升原理解析</title>
    <link href="http://lijundong.com/javascript-variable-lift/"/>
    <id>http://lijundong.com/javascript-variable-lift/</id>
    <published>2017-02-07T05:49:49.000Z</published>
    <updated>2017-02-07T07:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多 Javascript 教程或者书籍中都会介绍 Javascript 的变量提升，但是你了解其中的原因吗？</p>
<a id="more"></a>
<h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>首先来看两个经典的案例 （<strong>案例均处于严格模式</strong>）</p>
<p>案例一：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a;</span><br></pre></td></tr></table></figure></p>
<p>这个很简单，变量提升最直接的体现，输出的结果是 <code>1</code>，实际的执行顺序如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></p>
<p>案例二：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>这段代码执行会报错，不过错误是 a 是 <code>undefined</code>，而不是 <code>ReferenceError</code>，因为这段代码的实际执行顺序如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>要弄清楚 Javascript 变量提升，还得回到 Javascript 的编译阶段。</p>
<blockquote>
<p>Part of the compilation phase was to find and associate all declarations with their appropriate scopes.</p>
</blockquote>
<p>编译阶段的其中一个工作就是找到所有的声明，并用合适的作用域将它们关联起来，所有的变量声明以及函数声明都会在代码执行之前首先被处理。所以，分析 Javascript 代码的时候需要先关注声明。<br>这样就导致了 <code>var a = 1;</code> 被分解成了 <code>var a; a = 1;</code>，所以案例二的结果就很明显了。</p>
<h4 id="函数优先"><a href="#函数优先" class="headerlink" title="函数优先"></a>函数优先</h4><p>值得注意的是，变量提升时，<strong>函数声明优先</strong>，函数声明会被首先提升，其次才是变量，具体效果如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>执行的结果是 <code>1</code>，实际执行流程如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//var foo; //重复声明，被忽略</span></span><br><span class="line">foo();</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>参考：</strong></p>
<ul>
<li><em><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/ch4.md" target="_blank" rel="external">You Don’t Know JS: Scope &amp; Closures</a></em></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多 Javascript 教程或者书籍中都会介绍 Javascript 的变量提升，但是你了解其中的原因吗？&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://lijundong.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://lijundong.com/tags/javascript/"/>
    
      <category term="scope" scheme="http://lijundong.com/tags/scope/"/>
    
  </entry>
  
  <entry>
    <title>【建议收藏】Chrome 插件推荐</title>
    <link href="http://lijundong.com/chrome-extensions-recommend/"/>
    <id>http://lijundong.com/chrome-extensions-recommend/</id>
    <published>2017-02-03T12:52:51.000Z</published>
    <updated>2017-02-04T13:21:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天总结一下你可能还不知道的 Chrome 插件，可能会解决你长久以来的痛点，欢迎补充。</p>
<a id="more"></a>
<h3 id="关于-Chrome"><a href="#关于-Chrome" class="headerlink" title="关于 Chrome"></a>关于 Chrome</h3><p>在一次重装系统之后，安装完 Chrome 之后登陆 Google 账号，亲眼见证了扩展挨个恢复，从来没有一个产品给我这样深刻的记忆，那样的感动难以言表。Chrome 会同步所有正在使用的扩展，包括商城里已经下线的扩展！<br>在 <a href="http://www.lijundong.com/SublimeText-extension-recommend/" target="_blank" rel="external">SublimeText 插件推荐</a> 中提过，我喜欢使用生态更完整的产品，不过在云服务时代 Sublime 的插件无法同步，这就比较尴尬了(曾有个插件试图解决这个痛点，后不了了之)。相比于 Sublime，Chrome 是一个更趋于完美的产品。</p>
<p><strong>当然，你还需要解决墙的问题</strong></p>
<h3 id="扩展推荐"><a href="#扩展推荐" class="headerlink" title="扩展推荐"></a>扩展推荐</h3><p>本想给这些插件分类，但是这样似乎会把简单的事情变得复杂，所以，数量不多，按需所取（排名不分先后）。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="external">live reload</a></strong><br>应用场景：在你的编辑器中安装 livereload 插件（例如 SublimeText），在编辑文件时预览到 Chrome 中，你的编辑器和 Chrome 即可通讯，达到所见即所得的境界。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Proxy SwitchyOmega</a></strong><br>应用场景：轻松管理网络代理，推荐配合 SS 使用。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/%E4%BA%8C%E7%BB%B4%E7%A0%81qr%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8qr-code-generato/pflgjjogbmmcmfhfcnlohagkablhbpmg" target="_blank" rel="external">二维码(QR码)生成器(QR Code Generator)</a></strong><br>应用场景：为当前页面地址生成二维码。</p>
<p><strong><a href="http://www.editthiscookie.com/" target="_blank" rel="external">EditThisCookie</a></strong><br>应用场景：编辑站点 cookie。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd" target="_blank" rel="external">IE Tab</a></strong><br>应用场景：一键模拟 IE 内核，在一些比较特殊的场景下比较使用，不用特意再去打开 IE。</p>
<p><strong><a href="https://wappalyzer.com/?pk_campaign=chrome&amp;pk_kwd=context" target="_blank" rel="external">Wappalyzer</a></strong><br>应用场景：查看当前网站所用技术栈</p>
<p><strong><a href="http://www.alexa.com/" target="_blank" rel="external">Alexa Rank</a></strong><br>应用场景：查看当前站点的全球 Alexa 排名</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg" target="_blank" rel="external">Take Webpage Screenshots Entirely</a></strong><br>应用场景：功能强大的网页截图，并且提供 Pro 选项，截图可以存储为 PDF 或者 图片。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/%E6%9E%81%E7%AE%80%E5%9B%BE%E5%BA%8A/heebflcbemenefckkgfnnklbhdbdkagg" target="_blank" rel="external">极简图床</a></strong><br>应用场景：配合七牛账号，轻松上传文件到七牛，管理方便，如果你喜欢使用 Markdown，那么你可以尝试一下。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/save-to-pocket/niloccemoadcdkdjlinkgdfekeahmflj" target="_blank" rel="external">Save to Pocket</a></strong><br>应用场景：稍后阅读，登录 Pocket 账户，全平台同步，方便快捷。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc" target="_blank" rel="external">Evernote Web Clipper</a></strong><br>应用场景：使用体验和 Pocket 异曲同工，登录印象笔记，全平台同步剪藏。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="external">OneTab</a></strong><br>应用场景：一键保存并关闭当前窗口的所有 TAB，如果你想关闭当前窗口的所有 TAB，但又想保存下来下次再打开，这无疑是最好的选择，在遇到这个插件之前我都是用书签功能，导致最后留下大量书签。</p>
<p><strong><a href="https://jasonsavard.com/?ref=homepage_url&amp;ext=gmail" target="_blank" rel="external">Checker Plus for Gmail </a></strong><br>应用场景：Gmail 最佳伴侣，登陆 Gmail 账户就可以轻松管理邮件了。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/gighmmpiobklfepjocnamgkkbiglidom" target="_blank" rel="external">Ad Block</a></strong><br>应用场景：过滤广告，地表最强</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb" target="_blank" rel="external">Vimium</a></strong><br>应用场景：你试过用 Vim 命令操纵 Chrome 吗，你想试试吗</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca" target="_blank" rel="external">Momentum</a></strong><br>应用场景：给你一个赏心悦目的 New Tab 界面</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/infinity-new-tab/dbfmnekepjoapopniengjbcpnbljalfg" target="_blank" rel="external">Infinity</a></strong><br>应用场景：有些同学不喜欢 Momentum，说我就喜欢功能丰富的，那么 Infinity 肯定适合你，它会提供你一个功能丰富的 New Tab。</p>
<p><strong><a href="https://chrome.google.com/webstore/detail/stylish-custom-themes-for/fjnbnpbmkenffdnngjfgmeleoegfcffe/related" target="_blank" rel="external">Stylish</a></strong><br>应用场景：此扩展可以让网站应用已有的主题，相信我，他能拯救你的审美疲劳。</p>
<p><strong>Better History</strong>：已下线<br>应用场景：给你更好的浏览历史体验，前段时间开始用的，昨天看却下线了</p>
<p><strong>印象笔记·悦读</strong>：已下线<br>应用场景：将网页内容重新排版，给你更舒适的阅读体验，配合印象笔记使用，体验更佳，不知为何也下线了。</p>
<p><strong>欢迎补充！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天总结一下你可能还不知道的 Chrome 插件，可能会解决你长久以来的痛点，欢迎补充。&lt;/p&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://lijundong.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="chrome" scheme="http://lijundong.com/tags/chrome/"/>
    
      <category term="extension" scheme="http://lijundong.com/tags/extension/"/>
    
  </entry>
  
  <entry>
    <title>inline「一」：从 image 底部白边初识 line-height</title>
    <link href="http://lijundong.com/image-and-line-height/"/>
    <id>http://lijundong.com/image-and-line-height/</id>
    <published>2017-01-16T13:25:28.000Z</published>
    <updated>2017-01-17T16:50:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在做一个静态页面时，图片底部出现一条 3px 高度的白边，既不是 margin 也不是 padding，找了好久没能解决，后来才发现与 line-height 相关，问题解决后查缺补漏。<br>这里作下笔记。</p>
<a id="more"></a>
<p>解决问题之前需要理清楚几个概念，基线、line-height、vertical-align、inline 元素。</p>
<h3 id="基线-baseline"><a href="#基线-baseline" class="headerlink" title="基线(baseline)"></a>基线(baseline)</h3><p>基线(Baseline) 是字体排印学中的概念，指的是多数字母排列的基准线，大多字母都沿着红色基线排列，举个例子辅助理解<br><img src="http://source.lijundong.com/17-1-17/23484364-file_1484619667824_4a0a.png" alt=""><br>图中 xHh 字母的下边缘红线就是基线的所在，那么有没有一个特定的条件来定义基线呢？这里有个概念可供参考</p>
<blockquote>
<p>字母x的下边缘(线)就是基线的所在。</p>
</blockquote>
<p><img src="http://source.lijundong.com/17-1-17/82294663-file_1484620885555_15872.png" alt=""></p>
<p>这里又引出了 <a href="https://en.wikipedia.org/wiki/X-height" target="_blank" rel="external">x-height</a> 的概念，此处不表。</p>
<h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p>关于 line-height 如何定义的讨论，有说法是两条基线之间的距离，看到这个结论我首先想到第一行的行高如何处理，后来去找了资料，发现两条基线之间的距离即是 line-height 这样的结论并不准确。<br>关于 line-height 的定义，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/line-height" target="_blank" rel="external">MDN</a> 阐述如下：</p>
<blockquote>
<p>On block level elements, the line-height property specifies the minimum height of line boxes within the element.<br>On non-replaced inline elements, line-height specifies the height that is used to calculate line box height.</p>
</blockquote>
<p>即</p>
<blockquote>
<p>block 元素中， line-height 的值等于元素中高度最低的行框(line box) 的高度值。<br>在 non-replaced inline 元素中，line-height 的值等于行框(line box) 的高度值。</p>
</blockquote>
<p><img src="http://source.lijundong.com/17-1-18/72801786-file_1484669613097_12675.png" alt=""></p>
<p><strong>注：</strong></p>
<blockquote>
<p><strong>replaced element VS non-replaced element</strong></p>
<ul>
<li>replaced element: 例如 img、video、canvas 此类渲染出的内容引用外部的元素</li>
<li>non-replaced element: 渲染自身的 content，<br>例如 <code>&lt;a href=&quot;lijundong.com&quot;&gt;Leeon Blog&lt;/a&gt;</code> 此类，渲染出的内容来自自身。</li>
</ul>
</blockquote>
<h3 id="inline-内联-元素"><a href="#inline-内联-元素" class="headerlink" title="inline(内联) 元素"></a>inline(内联) 元素</h3><p>HTML5 中的常见 inline 元素如下：</p>
<ul>
<li>inline：span、strong、em</li>
<li>inline-block：input、button、textarea、select、img</li>
</ul>
<h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><p>vertical-align 作用于 inline 元素 以及 table-cell 元素，还有 <code>::first-letter</code> 和 <code>::first-line</code>，更多内容可以参见 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align" target="_blank" rel="external">MDN</a></p>
<p>属性分类：</p>
<p>适用于 inline 元素的属性：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* keyword values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: baseline;  <span class="comment">/*基于基线对齐*/</span></span><br><span class="line"><span class="attribute">vertical-align</span>: sub;</span><br><span class="line"><span class="attribute">vertical-align</span>: super;</span><br><span class="line"><span class="attribute">vertical-align</span>: text-top;</span><br><span class="line"><span class="attribute">vertical-align</span>: text-bottom;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="attribute">vertical-align</span>: top;</span><br><span class="line"><span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;length&gt; values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: <span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;percentage&gt; values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: <span class="number">20%</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: inherit;</span><br><span class="line"><span class="attribute">vertical-align</span>: initial;</span><br><span class="line"><span class="attribute">vertical-align</span>: unset;</span><br></pre></td></tr></table></figure></p>
<p>适用于 table-cell 的属性：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: top;</span><br><span class="line"><span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br></pre></td></tr></table></figure></p>
<h3 id="回到问题"><a href="#回到问题" class="headerlink" title="回到问题"></a>回到问题</h3><p>问题代码示例如下，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> &gt;</span><span class="css"></span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">margin</span>:  <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">img</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">div</span> ,<span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"headpic.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>代码效果图如下，红框圈出部分为出现的白条<br><img src="http://source.lijundong.com/17-1-18/21458514-file_1484670835947_1531c.jpg" alt=""></p>
<p>通过对代码稍作修改可以轻松看出问题所在，实图如下</p>
<p><img src="http://source.lijundong.com/17-1-18/83589094-file_1484670475410_3d83.jpg" alt=""></p>
<p>有了上面的铺垫，现在回头看遇到的问题，就很简单了，究其原委，首先 img 元素默认对齐方式为 <code>vertical-align: baseline;</code>，这就导致了，baseline 以下的部分被空了出来，显示了背景的白色。</p>
<p>问题找到了，对症下药可得出下面的解决方案：</p>
<ul>
<li><p>根本上消除 img 的对齐方式 —— 块状化：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; </span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改 img 对齐方式，以下三种均可</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改行高，行高是两条 baseline 之间的距离，因此可以暴力的让行高消失</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* font-size: 0; 当 line-height 使用数值、百分比或者 rem 定义时也可用这种方式，因为 line-height 参照的是 font-size 的值*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>遇到问题多多求证，即便是很常见的问题也会挖出大学问，在求证的过程中也不能尽用拿来主义，多参考 w3c 和 MDN 的文档。<br>写的过程中，修修补补了好几回，关于 vertical-align 的内容讲的很仓促，后面会补上，如果文中表达有误，烦请指出，感谢。</p>
<hr>
<p><em>参考：</em></p>
<ul>
<li><a href="http://www.imooc.com/learn/542" target="_blank" rel="external">CSS深入理解之vertical-align</a></li>
<li><a href="https://www.smashingmagazine.com/2012/12/css-baseline-the-good-the-bad-and-the-ugly/" target="_blank" rel="external">CSS Baseline: The Good, The Bad And The Ugly</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E7%B7%9A" target="_blank" rel="external">基线 wiki</a></li>
<li><a href="http://stackoverflow.com/questions/23247467/how-css-line-height-is-measured" target="_blank" rel="external">How CSS line-height is measured?</a></li>
<li><a href="https://www.w3.org/Talks/2008/0911-CSS-Amsterdam/" target="_blank" rel="external">Understanding the CSS box model</a></li>
<li><a href="http://stackoverflow.com/questions/28363186/inline-elements-and-line-height" target="_blank" rel="external">Inline elements and line-height</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做一个静态页面时，图片底部出现一条 3px 高度的白边，既不是 margin 也不是 padding，找了好久没能解决，后来才发现与 line-height 相关，问题解决后查缺补漏。&lt;br&gt;这里作下笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://lijundong.com/categories/css/"/>
    
    
      <category term="css" scheme="http://lijundong.com/tags/css/"/>
    
      <category term="inline" scheme="http://lijundong.com/tags/inline/"/>
    
      <category term="line-height" scheme="http://lijundong.com/tags/line-height/"/>
    
      <category term="baseline" scheme="http://lijundong.com/tags/baseline/"/>
    
  </entry>
  
  <entry>
    <title>可能是写了篇假的年终总结</title>
    <link href="http://lijundong.com/year-again-2017/"/>
    <id>http://lijundong.com/year-again-2017/</id>
    <published>2017-01-15T12:35:05.000Z</published>
    <updated>2017-01-15T15:05:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017 年的第一个月已经过了一半，一篇文章都没憋出来，先拿这篇凑数吧<br><a id="more"></a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29393038&auto=0&height=66"></iframe>

<p>来京一月有半，除元旦和几位在北京的高中同学聚过一次，其余时间均在住处与公司之间兜转，回家的车票买在一周后，周五临时和两位相熟的朋友决定四(chi)处(chi)转(he)转(he)。<br>到什刹海后，被友人领去了一家巷子深处的烤肉店，味道胜于之前吃过的所有的烤肉，也刷新了之前因为学校周边的纸上烤肉给烤肉贴上的消极标签，加之老板为人亲切，全程都十分舒心。<br>午饭后沿着完全商业化的巷子无目的地走，顺便给他们俩找厕所，连续找了几处都没找到，其中一处是一小巷，巷内也许是住家或是商铺，可能与公厕的外形太过相似，他俩凭着直觉就走进去，也不顾入口处挂着的内无公厕的标识，我想巷内的人应该经历过游客 DDOS 攻击吧，一堆人不来买东西，在门前晃悠找厕所，哈哈！<br>本想着去后海看看，后来变了主意改去天坛溜达，我对北京的主要景点的印象还停留在七年前，初三毕业时学校组织的旅游。不同的是来的时候是夏天，这次是冬天。我对天坛的印象除了祈年殿，剩下的就是那些坐在回廊长凳上打牌的一群群老人，上次来的时候正值酷夏，天气热得很，但是天坛中却十分凉爽，那些聚在此处打牌的老人，真是惬意啊，从进门开始我便开始找那排回廊，直到看见那群老人还在那里，热闹非凡，中途还打趣说这是老年人聚众赌博，哈哈！会不会这些人中，七年前的那群人里会不会今天也在场的呢，想想也是十分有趣。</p>
<p>万物生老病死，规律使然，这些建筑也是一样。即便已经到了快凋零的年纪，但为了慕名而来的游客，还是被涂上了新世纪的胭脂，汉白玉石阶要么被换了新，要么被盖上了木板保护。<br>当时在小摊上买了一个天坛的木板立体拼图，回家后跟我姐一起拼起来，我爸又在表面涂了一层清漆，看着很好看。</p>
<p><img src="http://source.lijundong.com/17-1-15/45714704-file_1484489002339_ab0a.jpg" alt="天坛"></p>
<p>物理教材上出现的回音壁，大家都在墙边喊，不过效果甚微，可能是请求过多，回音壁宕机了吧，哈哈</p>
<p><img src="http://source.lijundong.com/17-1-15/86359476-file_1484489001885_c66.jpg" alt="回音壁"></p>
<p>估摸到了五点多，晚饭决定回西二旗找家火锅店再吃顿火锅，地铁到了中途，三个人已经十分疲惫，临时决定下车休息下，休息了十分钟又临时决定直接在附近找家火锅店解决晚饭，太任性了。</p>
<p>饭罢，各自回家。一切都非常愉快，除了一件，早晨出门刚换上干净衣服，吃了烤肉和火锅之后，全身都散发着火锅的芬芳，到了家，洗澡洗头，衣服全都得洗，这样的场景已经出现了两次，深受其扰，尤其在这样的冬天。</p>
<hr>
<p>我是严肃的分割线</p>
<p>16 年的事情都比较细碎，很多方向之前就了解过，大多浅尝辄止，这一年多数时间的工作都是修修补补。关于毕业之后去向的问题也迷茫过，像无头苍蝇乱飞乱撞。机缘巧合，来了北京实习，这段时间见了山，见了人，收获有的。</p>
<p>这是 17 年的第一篇，之前很多时候想写，认为内容太过简单或是对于那些知识的认知还不够细致，只好作罢，摄入和产出是成正比的，希望 17 年多多学习，多多产出，更多地考虑原理性问题，而不是一直停留在应用层面。学习一些酷酷的东西，对，就是拿来吹牛的，哈哈。</p>
<p>今年开始，不确定性越来越多，介于好奇与恐惧之间的感觉真是奇妙。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017 年的第一个月已经过了一半，一篇文章都没憋出来，先拿这篇凑数吧&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lijundong.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="游记" scheme="http://lijundong.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="总结" scheme="http://lijundong.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 自定义日志</title>
    <link href="http://lijundong.com/hexo-blog-custom-log/"/>
    <id>http://lijundong.com/hexo-blog-custom-log/</id>
    <published>2016-12-25T06:23:11.000Z</published>
    <updated>2017-02-10T02:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在这里记录下 Blog 基于 Hexo 和 Next 主题的一些自定义。</p>
<ul>
<li>自定义 url</li>
<li>文末添加版权说明</li>
<li>文末添加推荐文章列表</li>
<li>博客迁移</li>
</ul>
<a id="more"></a>
<h3 id="自定义-url"><a href="#自定义-url" class="headerlink" title="自定义 url"></a>自定义 url</h3><p>关于 url 的格式，建议在博客刚上线的时候就确定好，因为多说评论以及访客数据都是和 url 绑定的，每一次换 url 都意味着之前的多说评论数据和访问数据都会清空，我的的数据已经被清空过两次了，第一次是把 url 从中文更换为 英文，第二次就是这次，我将 url 的格式从 <code>domain/year/month/title</code> 换成了 <code>domain/title</code>，更简洁，也更容易理解链接的内容。</p>
<h4 id="更改方式"><a href="#更改方式" class="headerlink" title="更改方式"></a>更改方式</h4><p>在 Hexo 的配置文件 <code>_config.yml</code> 中<br>更改 <code>permalink:</code> 配置选项为 <code>permalink: :title/</code></p>
<p>关于 Permalinks 更多参数 可以参考官方文档 <a href="https://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="external">Permalinks(永久链接)</a></p>
<h3 id="文末添加版权说明（Next-主题）"><a href="#文末添加版权说明（Next-主题）" class="headerlink" title="文末添加版权说明（Next  主题）"></a>文末添加版权说明（Next  主题）</h3><p>最近看后台数据的时候，发现一篇文章被 latex 社区收录了，挺高兴的，只是文章被修改了一些内容，于是想在每篇文末添加一个版权说明，方法很简单。</p>
<h4 id="更改方式-1"><a href="#更改方式-1" class="headerlink" title="更改方式"></a>更改方式</h4><p>首先在 <code>/themes/layout/post.swig</code> 文件，修改 <code>&lt;footer class=&quot;post-footer&quot;&gt; &lt;/footer&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &#123;# 添加版权信息 #&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div class=&quot;copyright&quot; style=&quot;clear:both;&quot;&gt;</span><br><span class="line">           &lt;h3&gt;文档信息&lt;/h3&gt;</span><br><span class="line">           &lt;p&gt;&lt;span&gt;文章作者：&lt;/span&gt;&lt;a href=&quot;http://lijundong.com&quot; title=&quot;李俊冬的网络日志&quot;&gt;李俊冬&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">           &lt;p&gt;&lt;span&gt;发表时间：&lt;/span&gt;&#123;&#123; post.date.format(&quot;YYYY-M-D-HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">           &lt;p&gt;&lt;span&gt;文章标题：&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">           &lt;p&gt;&lt;span&gt;原文链接：&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;&#123;&#123; post.permalink &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">           &lt;p&gt;&lt;span&gt;版权声明：&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh&quot; title=&quot;自由转载-非商用-非衍生-保持署名 (创意共享3.0许可证)&quot;&gt;自由转载-非商用-非衍生-保持署名（创意共享3.0许可证）&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">           &lt;p&gt;&lt;strong&gt;为方便溯源，避免陈旧错误知识的误导，转载请保留以上信息&lt;/strong&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# 文末的标签 #&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">        &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">          &#123;% for tag in post.tags %&#125;</span><br><span class="line">            &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;#&#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">          &#123;% endfor %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">         &#123;# 使用 list_posts 添加了文章列表 #&#125;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;posts-recommend&quot;&gt;</span><br><span class="line">            &lt;h3&gt;更多文章&lt;/h3&gt;</span><br><span class="line">               &#123;&#123; list_posts() &#125;&#125;  </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# 此处是前后文章导航，因为上面添加了推荐文章列表，我把这一块注释了 #&#125;</span><br><span class="line"></span><br><span class="line">    &#123;# &#123;% if not is_index and (post.prev or post.next) and not navlessPost %&#125;</span><br><span class="line">        &lt;div class=&quot;post-nav&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;post-nav-next post-nav-item&quot;&gt;</span><br><span class="line">            &#123;% if post.next %&#125;</span><br><span class="line">              &lt;a href=&quot;&#123;&#123; url_for(post.next.path) &#125;&#125;&quot; rel=&quot;next&quot; title=&quot;&#123;&#123; post.next.title &#125;&#125;&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;fa fa-chevron-left&quot;&gt;&lt;/i&gt; &#123;&#123; post.next.title &#125;&#125;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;post-nav-prev post-nav-item&quot;&gt;</span><br><span class="line">            &#123;% if post.prev %&#125;</span><br><span class="line">              &lt;a href=&quot;&#123;&#123; url_for(post.prev.path) &#125;&#125;&quot; rel=&quot;prev&quot; title=&quot;&#123;&#123; post.prev.title &#125;&#125;&quot;&gt;</span><br><span class="line">                &#123;&#123;post.prev.title&#125;&#125; &lt;i class=&quot;fa fa-chevron-right&quot;&gt;&lt;/i&gt;</span><br><span class="line">              &lt;/a&gt;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125; #&#125;</span><br><span class="line">  &#123;% set isLast = loop.index % page.per_page === 0 %&#125;</span><br><span class="line">  &#123;% if is_index and not isLast %&#125;</span><br><span class="line">    &lt;div class=&quot;post-eof&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure>
<h3 id="文末添加推荐文章列表"><a href="#文末添加推荐文章列表" class="headerlink" title="文末添加推荐文章列表"></a>文末添加推荐文章列表</h3><p>我将文末的前后文章导航页去除，通过 <code>list_posts()</code> 方法添加了最近的文章列表</p>
<p>具体代码如下，完整代码可参见上一条完整代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;posts-recommend&quot;&gt;</span><br><span class="line">    &lt;h3&gt;更多文章&lt;/h3&gt;</span><br><span class="line">    &#123;&#123; list_posts() &#125;&#125;  </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<p>关于 <code>list_posts()</code> 的用法，更多用法可参照官方文档 <a href="https://hexo.io/zh-cn/docs/helpers.html#list-posts" target="_blank" rel="external">list_posts</a></p>
<h3 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h3><h4 id="粗暴复制"><a href="#粗暴复制" class="headerlink" title="粗暴复制"></a>粗暴复制</h4><p>如果你更滑了新的电脑，迁移 hexo 的博客很简单，我的方式是直接复制 hexo 博客目录(不包含 node_modules 和 public 目录)，在新的电脑中执行 <code>npm install hexo-cli -g</code> 安装 hexo，在博客目录下执行 <code>npm install</code> （package.json 中包含所有的依赖信息），如果 node 版本不一致执行 <code>npm rebuild</code> 命令重新编译。git 的相关操作在这里不再赘述。</p>
<h4 id="优雅的云备份"><a href="#优雅的云备份" class="headerlink" title="优雅的云备份"></a>优雅的云备份</h4><p>复制太过简单粗暴，有更优雅的方式，就是当作 git 项目托管在平台上，如果不想作为 public 项目托管的话，可以选择 github 的付费托管或者国内的 coding 平台进行托管。</p>
<p>如果你的主题是 clone 的平台上的开源项目，主题本身就存在版本控制，那么需要知道知道 <a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="external">Git 工具-子模块</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里记录下 Blog 基于 Hexo 和 Next 主题的一些自定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义 url&lt;/li&gt;
&lt;li&gt;文末添加版权说明&lt;/li&gt;
&lt;li&gt;文末添加推荐文章列表&lt;/li&gt;
&lt;li&gt;博客迁移&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://lijundong.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="hexo" scheme="http://lijundong.com/tags/hexo/"/>
    
      <category term="next" scheme="http://lijundong.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>小记 - Hexo 部署到阿里云服务器</title>
    <link href="http://lijundong.com/note-hexo-deploy-on-server/"/>
    <id>http://lijundong.com/note-hexo-deploy-on-server/</id>
    <published>2016-12-18T15:58:45.000Z</published>
    <updated>2016-12-18T17:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天把 hexo blog 迁移到阿里云服务器，全程看别人的文章，每篇文章描述的方式不尽相同，加之软件环境的不同，再加之我的理解能力短板，中间走了好几次弯路，配完之后，对整体过程加深了理解，之后又重新看了 <code>git hook</code> 的文档，结合配置过程，这里做一次小记。<br><a id="more"></a></p>
<blockquote>
<p><strong>注：</strong></p>
<ul>
<li>因为是迁移，所以这篇笔记不会介绍 Hexo 相关用法。</li>
<li>网上详细的教程非常多，这里细节不做详述，只会总结整体流程以及过程中遇到的坑</li>
</ul>
</blockquote>
<p>之前使用 Hexo 部署静态博客到 Github 或者 coding，也没有细究实现原理，但是一直在折腾，后来看到了下面这张图，这是从 <code>hexo d -g</code> 命令一直到浏览器访问到博客页面的整个流程的架构图。<br>在部署之前看懂这张图，部署过程会十分流畅。</p>
<p><img src="http://source.lijundong.com/16-12-19/68486025-file_1482077506840_3562.png" alt=""></p>
<h3 id="流程架构"><a href="#流程架构" class="headerlink" title="流程架构"></a>流程架构</h3><ul>
<li>Hexo 文件结构下，<code>\source</code> 存放所有 <code>markdown</code> 原文件，我们写的文章 存放在 <code>\source\_post</code> 目录下</li>
<li><code>hexo generate</code> 命令将 <code>\source</code> 下的 <code>markdown</code> 文件编译为 <code>html</code> 文件存放到 <code>\public</code> 目录下，并且根据时间、tag、category 等生成了索引页面。</li>
<li><code>hexo deploy</code> 命令将把 <code>\public</code> 目录下内容推到服务器。</li>
<li>现在博文已经在服务器了，只不过是在仓库里，我们将内容 <code>checkout</code> 或者 <code>clone</code> 到某个可以通过 <code>nginx</code> 访问的目录下，例如 <code>\var\www</code>(如无 <code>www</code>，可以新建)，<strong>注意：不要放在用户文录下</strong></li>
<li>通过 <code>nginx</code> 或者其他服务器，将静态站点暴露出去，到这里，所有的核心工作已经完成了</li>
</ul>
<h3 id="DIY"><a href="#DIY" class="headerlink" title="DIY"></a>DIY</h3><p>如果需要 DIY，可以分以下三步走</p>
<ul>
<li>搭建 Git 服务器：中英文链接在文末，可能需要花点时间</li>
<li>编写 <code>post-receive</code> 脚本：中英文链接在文末，这一步，可以简单粗暴</li>
<li>配置 <code>nginx</code>：配置 <code>nginx</code> 服务器，这个也很简单</li>
</ul>
<h3 id="仅供参考"><a href="#仅供参考" class="headerlink" title="仅供参考"></a>仅供参考</h3><p>关于 Git 服务器，可以参考 Git 官网文档，或者是廖雪峰先生的教程，做到正常推拉即可。</p>
<p>关于 <code>git hooks</code>，昨天写的小记 <a href="http://lijundong.com/2016/12/16/git-hooks/">Git Hooks</a>，可以了解下<br>上面我说这一步可以简单粗暴，下面是我的服务器上的 <code>post-receive</code> 脚本，我把代码 从仓库直接 <code>clone</code> 到 <code>/var/www/hexo</code> 目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">unset GIT_DIR</span><br><span class="line">cd /var/www/hexo</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>关于 <code>nginx</code> 配置</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span>  &#123;</span><br><span class="line">    <span class="comment"># 指定端口</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 绑定域名</span></span><br><span class="line">    <span class="attribute">server_name</span> localhost www.lijundong.com lijundong.com;</span><br><span class="line">    <span class="attribute">access_log</span> /var/log/nginx/domain1.access.log;</span><br><span class="line">    <span class="comment"># 入口文件</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="comment"># 博客路径</span></span><br><span class="line">    <span class="attribute">root</span>  /var/www/hexo;</span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">404</span>   /<span class="number">404</span>.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>教程虽好，且看且学习，知其然，更应知其所以然</p>
<p>晚安！</p>
<p>参考:</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000005723321" target="_blank" rel="external">架构图</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="external">搭建Git服务器 - 廖雪峰</a></li>
<li><a href="https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server" target="_blank" rel="external">Git on the Server - Setting Up the Server</a></li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="external">5.4 Git钩子：自定义你的工作流</a></li>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="external">8.3 Customizing Git - Git Hooks</a></li>
<li><a href="http://lijundong.com/2016/12/16/git-hooks/">Git Hooks</a></li>
<li><a href="http://lijundong.com/2016/10/12/nginx-conficure-domains-to-servers/">Nginx 配置多个Node服务的域名</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天把 hexo blog 迁移到阿里云服务器，全程看别人的文章，每篇文章描述的方式不尽相同，加之软件环境的不同，再加之我的理解能力短板，中间走了好几次弯路，配完之后，对整体过程加深了理解，之后又重新看了 &lt;code&gt;git hook&lt;/code&gt; 的文档，结合配置过程，这里做一次小记。&lt;br&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://lijundong.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="服务器" scheme="http://lijundong.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="hexo" scheme="http://lijundong.com/tags/hexo/"/>
    
      <category term="阿里云" scheme="http://lijundong.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="hook" scheme="http://lijundong.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>Git Hooks</title>
    <link href="http://lijundong.com/git-hooks/"/>
    <id>http://lijundong.com/git-hooks/</id>
    <published>2016-12-16T11:25:34.000Z</published>
    <updated>2016-12-18T11:14:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Git Hooks</code> 是 Git 提供的允许用户自定义的脚本，这些脚本会在特定条件下被触发，我们可以通过自定义脚本来定制 Git。<br>之前迁移博客到阿里云，<code>Git Hooks</code> 就是非常重要的一部分，我在服务器上使用的 Hook 类型是 <code>post-receive</code>，今天把相关部分官方的文档重新看了下，这篇笔记是在官方文档的基础上进行演绎的。<br><a id="more"></a></p>
<h3 id="安装-Hooks"><a href="#安装-Hooks" class="headerlink" title="安装 Hooks"></a>安装 Hooks</h3><p>多数情况下，所有的 hook 放在 <code>.git/hooks</code> 目录下，当我们执行 <code>git init</code> 时，Git 就会将一些示例脚本填充在 <code>.git/hooks</code> 目录下，这些示例脚本命名以 <code>.sample</code> 后缀，默认不执行，如果想执行这些脚本，可以重命名(去掉 <code>.sample</code> 后缀)，也可以自定义脚本，保存在 <code>.git/hooks</code> 目录下，<strong>并且给予脚本执行权限</strong>。</p>
<p><strong>需要注意的是，Hook  不随项目的克隆而进行复制，也不受版本控制的影响。</strong></p>
<p>Hook 根据使用场景可以分为 客户端(本地) Hooks 和服务端 Hooks。不同使用场景下，根据不同触发条件又分为若干类。</p>
<h3 id="客户端-本地-Hook"><a href="#客户端-本地-Hook" class="headerlink" title="客户端(本地) Hook"></a>客户端(本地) Hook</h3><h4 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h4><p>在 <code>git commit</code> 命令之后，这个脚本会首先运行，用来检查提交的快照，检查有没有遗漏，或者检查一些自定义的选项(例如检查代码格式，检查空格等)，当脚本返回非 0 值时，则中断 <code>commit</code>。<br>你也可以通过 <code>git commit --no-verify</code> 命令提交来跳过这个过程。</p>
<p>参数： 无</p>
<h4 id="prepare-commit-msg"><a href="#prepare-commit-msg" class="headerlink" title="prepare-commit-msg"></a>prepare-commit-msg</h4><p>在 <code>commit</code> 过程中需要编辑 <code>commit message</code>，这个脚本会在默认 <code>commit message</code> 生成之后，在你看到编辑器之前运行，通过这个脚本可以修改默认的 <code>commit message</code>。</p>
<p>参数：</p>
<ul>
<li>默认 <code>commit message</code> 文件路劲</li>
<li>提交类型</li>
<li>commit SHA-1(可选)</li>
</ul>
<h4 id="commit-msg"><a href="#commit-msg" class="headerlink" title="commit-msg"></a>commit-msg</h4><p>这个脚本可以用来检验用户编辑的 <code>commit message</code>。可以用来检查 <code>commit message</code> 是否合乎规范。</p>
<p>参数：</p>
<ul>
<li>存放用户编写的 <code>commit message</code> 的临时文件的路劲</li>
</ul>
<h4 id="pre-rebase"><a href="#pre-rebase" class="headerlink" title="pre-rebase"></a>pre-rebase</h4><p>这个脚本会在 <code>git rebase</code> 命令之前运行，在返回非 0 值时，会中断操作。<br>你可以通过这个脚本来禁用 <code>rebase</code>，示例如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># disallow rebasing any commits</span><br><span class="line">echo &quot;pre-rebase: Rebasing is disallowed.&quot;</span><br><span class="line">exit 1</span><br></pre></td></tr></table></figure>
<h3 id="服务端-Hook"><a href="#服务端-Hook" class="headerlink" title="服务端 Hook"></a>服务端 Hook</h3><p>服务端的 Hook 允许我们在 <code>git push</code> 的不同阶段进行操作。</p>
<h4 id="pre-receive"><a href="#pre-receive" class="headerlink" title="pre-receive"></a>pre-receive</h4><p>客户端 push 过来的内容，必须通过这个脚本的检查来判断接受与否。</p>
<h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>这个脚本在代码更新之前执行。<br><code>update</code> 和 <code>pre-receive</code> 很相似，不同的是，如果我们想把代码推到不同分支，那么 <code>pre-receive</code> 只会执行一次，而 <code>update</code> 在每个分支更新之前都会执行一次。</p>
<h4 id="post-receive"><a href="#post-receive" class="headerlink" title="post-receive"></a>post-receive</h4><p><code>post-receive</code> 脚本在所有流程完成之后被触发，前几天迁移博客时才用到，服务器代码库合并了我的 <code>push</code> 后，通过 <code>post-receive</code> 脚本将仓库 <code>clone</code> 到我的博客目录下，以达到更新效果。</p>
<p>参考:</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="external">Customizing Git - Git Hooks</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Git Hooks&lt;/code&gt; 是 Git 提供的允许用户自定义的脚本，这些脚本会在特定条件下被触发，我们可以通过自定义脚本来定制 Git。&lt;br&gt;之前迁移博客到阿里云，&lt;code&gt;Git Hooks&lt;/code&gt; 就是非常重要的一部分，我在服务器上使用的 Hook 类型是 &lt;code&gt;post-receive&lt;/code&gt;，今天把相关部分官方的文档重新看了下，这篇笔记是在官方文档的基础上进行演绎的。&lt;br&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://lijundong.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="git" scheme="http://lijundong.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>测试 - Hexo 部署到阿里云</title>
    <link href="http://lijundong.com/deploy-hexo-blog-on-server/"/>
    <id>http://lijundong.com/deploy-hexo-blog-on-server/</id>
    <published>2016-12-13T18:55:57.000Z</published>
    <updated>2016-12-23T12:12:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>测试 git push 之后 hook 触发没有</p>
</blockquote>
<p>Hexo 最开始部署在 Github，因为速度太慢，访问性太差，而且偶尔还被 DDOS，为了缩短加载时间，转到了 Coding 上，今天把它迁到了阿里云上。</p>
<p>我是测试的分割线</p>
<hr>
<p>hook 生效，push 上去即可更新<br>生活又开始有希望起来</p>
<a id="more"></a>
<blockquote>
<p>PS：Coding 正在变得越来越好，提供的服务也越来越强大，工程师八哥半夜还在回复 Bug，每一次更新都会带来惊喜。</p>
</blockquote>
<p>迁移到 Coding 之后，便捷提高了，只不过在给 <code>Coidng Page</code> 绑定自定义域名时出现了问题，绑定域名之后，通过自定义域名访问时，通过 <code>http</code> 方式，链接会被重置，必须手动 <code>https</code> 或者通过代理访问……这还怎么玩</p>
<p>为了对比，我借了胜祥同学的二级域名绑定了一次，正常访问，只可能是域名的问题了</p>
<p>问阿里云的工程师，得到的答复是服务器那边的问题，问 Coding 的工程师，他们也一头雾水，最后的结论是 <code>可能被墙了？</code></p>
<p>买过域名之后一直没备案，后来被屏蔽了，备案之后屏蔽解除了，不知道这个问题跟那次屏蔽有无关联</p>
<p>不想再被这样的问题困扰，自己动手，丰衣足食，思来想去还是直接放服务器上。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;测试 git push 之后 hook 触发没有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hexo 最开始部署在 Github，因为速度太慢，访问性太差，而且偶尔还被 DDOS，为了缩短加载时间，转到了 Coding 上，今天把它迁到了阿里云上。&lt;/p&gt;
&lt;p&gt;我是测试的分割线&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;hook 生效，push 上去即可更新&lt;br&gt;生活又开始有希望起来&lt;/p&gt;
    
    </summary>
    
      <category term="问题解决" scheme="http://lijundong.com/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="服务器" scheme="http://lijundong.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="hexo" scheme="http://lijundong.com/tags/hexo/"/>
    
      <category term="git" scheme="http://lijundong.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText 配置 LaTeX 编辑器</title>
    <link href="http://lijundong.com/start-latex-and-configure-latext-editor-with-sublime/"/>
    <id>http://lijundong.com/start-latex-and-configure-latext-editor-with-sublime/</id>
    <published>2016-11-23T13:15:40.000Z</published>
    <updated>2017-02-12T07:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇 <a href="http://jundong.coding.me/2016/11/17/novel-crawler-by-Nodejs/" target="_blank" rel="external">Node.js 实现简单小说爬虫</a>，文末处理 Markdown 文件时，因为 Pandoc 对中文支持度不好，折腾了一会没解决，退而求其次选择用 Chrome 打印功能把 Markdown 文件转成 PDF。折腾不出来肯定要继续折腾呀，最近抽空在 Ubuntu 配置了下，终于支持了中文文档转换，但是用的 LaTeX 模板是在网上找的，想自己写一个，顺便了解下 LaTeX。<br>工欲善其事，必先利其器。这里笔记下 SublimeTeXt3 下用 TeXlive 配置 LaTeX 编辑环境。<br><a id="more"></a></p>
<h3 id="系统-amp-软件-版本"><a href="#系统-amp-软件-版本" class="headerlink" title="系统 &amp; 软件 版本"></a>系统 &amp; 软件 版本</h3><ul>
<li>windows 10</li>
<li><a href="https://www.sublimetext.com/3" target="_blank" rel="external">Sublime Text3</a></li>
<li><a href="http://mirror.hust.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="external">TeX Live 2016</a></li>
</ul>
<h3 id="关于-TeX、LaTeX、TeX-Live"><a href="#关于-TeX、LaTeX、TeX-Live" class="headerlink" title="关于 TeX、LaTeX、TeX Live"></a>关于 TeX、LaTeX、TeX Live</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p><strong>专有名词，注意名词大小写</strong><br><strong>TeX：</strong>美国计算机教授高德纳 (Donald Ervin Knuth) 为了排版他的著作 『The Art of Computer Programming』(TAOCP) 编写的功能强大的排版软件。<br><strong>LaTeX：</strong>美国计算机科学家莱斯利·兰伯特为了准备他的著作 『The Great American Concurrency Book』基于 TeX 开发的宏，详见<a href="https://zh.wikipedia.org/wiki/LaTeX" target="_blank" rel="external">Wiki</a><br><strong>TeX Live：</strong>是由国际 TEX 用户组整理和发布的TEX软件发行套装，详见<a href="https://zh.wikipedia.org/wiki/TeX_Live" target="_blank" rel="external">wiki</a></p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="公式编辑"><a href="#公式编辑" class="headerlink" title="公式编辑"></a>公式编辑</h5><ul>
<li>在线：<a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn" target="_blank" rel="external">在线 LaTeX 公式编辑器</a></li>
<li>Office套件：在 office 套件里，通过 <a href="http://www.dessci.com/en/products/mathtype/" target="_blank" rel="external">MathType</a> 可以很方便地编辑公式</li>
<li>LaTeX：通过 LaTeX 语法输入公式</li>
</ul>
<h5 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h5><p>公式编辑只是 LaTeX 功能中的一项，排版才能体现出它的强大的功能，具体效果可以参见下面的 demo。<br><img src="http://source.lijundong.com/public/16-11-24/95505961.jpg" alt=""></p>
<h3 id="配置-LaTeX-编辑器"><a href="#配置-LaTeX-编辑器" class="headerlink" title="配置 LaTeX 编辑器"></a>配置 LaTeX 编辑器</h3><p>使用 LaTeX 进行排版的过程即，<strong>编辑完 TeX 文件，通过 TeX Live 将 LaTeX 文件编译成 PDF 文件</strong><br>为了操作方便，通过配置 Sublime 的插件 <code>LaTeXTools</code>，可快捷调用(快捷键：<code>Ctrl + B</code>) Tex Live 来编译文件，高效率编辑。 </p>
<p><strong>可选：</strong>高效到底，通过配置 sumatraPDF ，可在 PDF 生成后 自动在 sumatraPDF 中打开，实现实时预览的效果。</p>
<h4 id="安装-TeXlive"><a href="#安装-TeXlive" class="headerlink" title="安装 TeXlive"></a>安装 TeXlive</h4><p><strong>ISO 镜像下载地址：</strong><a href="http://mirror.hust.edu.cn/CTAN/systems/texlive/Images/" target="_blank" rel="external">TeX Live 2016</a><br>下载完成后，加载镜像，进入文件点击 <code>install-tl-windows.bat</code>(直接安装) 或者 <code>install-tl-advanced.bat</code>(提供可选项) 开始安装。</p>
<p>等待中……</p>
<p>安装完成后，还需要一步，<strong>将 LaTeX 执行文件的路径加入系统环境变量</strong><br>我在本机的路径为 <code>C:\texlive\2016\bin\win32</code>，加入系统环境变量后，可通过在 命令提示符(CMD) 执行 <code>latex</code> 命令检查，<strong>注：可能需要重启电脑</strong>。</p>
<h4 id="安装-sumatraPDF-可选"><a href="#安装-sumatraPDF-可选" class="headerlink" title="安装 sumatraPDF (可选)"></a>安装 sumatraPDF (可选)</h4><p>关于 Sumatra PDF：Sumatra PDF is a free PDF, eBook (ePub, Mobi), XPS, DjVu, CHM, Comic Book (CBZ and CBR) reader for Windows.</p>
<p>下载地址：<a href="http://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="external">Sumatra PDF </a></p>
<p>添加路径到系统环境变量：同 TeX Live 一样，为了能在 CMD 中通过命令执行程序，需要将 Sumatra PDF 执行文件的路径添加到系统环境变量，通过在 CMD 中执行命令检测配置是否成功。<strong>注：可能需要重启电脑</strong></p>
<h4 id="Sublime-安装-LaTeXtools-插件"><a href="#Sublime-安装-LaTeXtools-插件" class="headerlink" title="Sublime 安装 LaTeXtools 插件"></a>Sublime 安装 LaTeXtools 插件</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>如果对于 Sublime Text 不熟悉的同学，可以参见 <a href="http://jundong.coding.me/2016/03/17/SublimeText-extension-recommand/" target="_blank" rel="external">SublimeText 插件推荐</a><br>通过 Package Control 安装插件 <code>LaTeXTools</code></p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>配置文件路径：<br><code>Preference &gt; Package Setting &gt; LaTeXTools &gt; Setting-User</code></p>
<p>配置以下参数<br><code>texpath</code>：TeX Live 可执行文件的路径(即添加到环境变量中的路径)<br><code>distro</code>：修改为 <code>texlive</code><br><code>sumtra</code>：sumatraPDF 可执行文件的路径(即添加到环境变量中的路径)</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"windows"</span>: &#123;</span><br><span class="line">    <span class="string">"texpath"</span> : <span class="string">"C:\\texlive\\2016\\bin\\win32"</span>,</span><br><span class="line">    <span class="string">"distro"</span> : <span class="string">"texlive"</span>,</span><br><span class="line">    <span class="string">"sumatra"</span>: <span class="string">"C:\\Program Files\\SumatraPDF"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="配置-sumatraPDF-反向搜索"><a href="#配置-sumatraPDF-反向搜索" class="headerlink" title="配置 sumatraPDF 反向搜索"></a>配置 sumatraPDF 反向搜索</h5><p>路径为 SublimeText 的可执行文件路劲，如下示例<br><code>sumatrapdf.exe -inverse-search &quot;\&quot;C:\Program Files\Sublime Text 3\sublime_text.exe\&quot; \&quot;%f:%l\&quot;&quot;</code></p>
<h3 id="LaTeX-上手"><a href="#LaTeX-上手" class="headerlink" title="LaTeX 上手"></a>LaTeX 上手</h3><p>所有配置都完成了，下面可以测试成果了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\title&#123;SublimeText 配置 LaTeX 编辑器&#125;</span><br><span class="line">\author&#123;Leeon&#125;</span><br><span class="line">\date&#123;\today&#125;</span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;geometry&#125;</span><br><span class="line">\geometry&#123;papersize=&#123;21cm,29.7cm&#125;&#125;</span><br><span class="line">\geometry&#123;left=2.5cm,right=2.5cm,top=3cm,bottom=3cm&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">\maketitle</span><br><span class="line">\tableofcontents</span><br><span class="line">\section&#123;系统 \&amp; 软件 版本&#125;</span><br><span class="line">\begin&#123;center&#125;</span><br><span class="line">\includegraphics[width = .4\textwidth]&#123;boat.jpg&#125;</span><br><span class="line">\end&#123;center&#125;</span><br><span class="line">\section&#123;名词解释&#125;</span><br><span class="line">专有名词，注意名词大小写</span><br><span class="line">TeX：美国计算机教授高德纳 (Donald Ervin Knuth) 为了排版他的著作 『The Art of Computer Programming』(TAOCP) 编写的功能强大的排版软件。</span><br><span class="line">LaTeX：美国计算机科学家莱斯利·兰伯特为了准备他的著作 『The Great American Concurrency Book』基于 TeX 开发的宏，详见Wiki</span><br><span class="line">TeX Live：是由国际 TEX 用户组整理和发布的TEX软件发行套装，详见wiki</span><br><span class="line">\section&#123;使用场景&#125;</span><br><span class="line">\subsection&#123;公式编辑&#125;</span><br><span class="line">\subsection&#123;排版&#125;</span><br><span class="line">\section&#123;配置 LaTeX 编辑器&#125;</span><br><span class="line">\subsection&#123;安装 TeXlive&#125;</span><br><span class="line">\subsection&#123;安装 sumatraPDF (可选)&#125;</span><br><span class="line">\subsection&#123;Sublime 安装 LaTeXtools 插件&#125;</span><br><span class="line">\subsubsection&#123;安装&#125;</span><br><span class="line">\subsubsection&#123;配置&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure></p>
<p>编译效果：</p>
<p><img src="http://source.lijundong.com/public/16-11-24/95505961.jpg" alt=""></p>
<hr>
<p>知道 LaTeX 是大一高数课，林军老师的 PPT 的公式都是用 MathType 编辑，用过一段时间，高数结课后没再接触，之后在王垠的<a href="http://www.yinwang.org/blog-cn/2014/01/04/authority" target="_blank" rel="external">博客</a>里，看到他提到一些关于 TeX 的观点，最后却只记得他拿了 Donald Knuth 的支票，觉得此人厉害。再次和 TeX 擦肩而过……<br>还好这次花了时间去了解，让我看到一个新的维度世界，感觉很开心</p>
<p>Better late than never</p>
<hr>
<p><em>参考：</em></p>
<ul>
<li><a href="https://th0.me/1737.html" target="_blank" rel="external">TeXLive + Sublime TeXt 3 + LaTeXTools 环境配置</a></li>
<li><a href="http://liam0205.me/2014/09/08/LaTeX-introduction/" target="_blank" rel="external">一份其实很短的 LaTeX 入门文档</a></li>
<li><a href="http://attach3.bdwm.net/attach/boards/MathTools/M.1364651898.A/TeX_intro_talk.pdf" target="_blank" rel="external">LaTeX 入门</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇 &lt;a href=&quot;http://jundong.coding.me/2016/11/17/novel-crawler-by-Nodejs/&quot;&gt;Node.js 实现简单小说爬虫&lt;/a&gt;，文末处理 Markdown 文件时，因为 Pandoc 对中文支持度不好，折腾了一会没解决，退而求其次选择用 Chrome 打印功能把 Markdown 文件转成 PDF。折腾不出来肯定要继续折腾呀，最近抽空在 Ubuntu 配置了下，终于支持了中文文档转换，但是用的 LaTeX 模板是在网上找的，想自己写一个，顺便了解下 LaTeX。&lt;br&gt;工欲善其事，必先利其器。这里笔记下 SublimeTeXt3 下用 TeXlive 配置 LaTeX 编辑环境。&lt;br&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://lijundong.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="LaTeX" scheme="http://lijundong.com/tags/LaTeX/"/>
    
      <category term="sublime" scheme="http://lijundong.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 实现简单小说爬虫</title>
    <link href="http://lijundong.com/novel-crawler-by-Nodejs/"/>
    <id>http://lijundong.com/novel-crawler-by-Nodejs/</id>
    <published>2016-11-17T14:17:32.000Z</published>
    <updated>2017-02-12T07:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为剧荒，老大追了爱奇艺的一部网剧，由丁墨的同名小说《美人为馅》改编，目前已经放出两季，虽然整部剧槽点满满，但是老大看得不亦乐乎，并且在看完第二季之后跟我要小说资源，直接要奔原著去看结局……<br>随手搜了下，都是在线资源，下载的话需要登录，注册登录好麻烦，写个爬虫玩玩也好，于是动手用 node 写了一个，这里做下笔记<br><a id="more"></a></p>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ul>
<li>获取 URLs 列表(请求资源 <code>request</code> 模块)</li>
<li>根据 URLs 列表获取相关页面源码(可能遇到页面编码问题，<code>iconv-lite</code> 模块)</li>
<li>源码解析，获取小说信息( <code>cheerio</code> 模块)</li>
<li>保存小说信息到 Markdown 文件，并且加适当修饰以及章节信息(写文件 <code>fs</code>、同步请求资源 <code>sync-request</code> 模块)</li>
<li>Markdown 转 PDF (使用 Pandoc 或者 Chrome 的打印功能)</li>
</ul>
<h3 id="获取-URLs"><a href="#获取-URLs" class="headerlink" title="获取 URLs"></a>获取 URLs</h3><p>根据小说的导航页，获取小说所有章节的 URL，并且以 JSON 数组的方式存储。</p>
<ul>
<li>首选通过 <code>http.get()</code> 方法获取页面源码</li>
<li>获取到源码，打印发现中文乱码，查看发现 <code>charset = &#39;gbk&#39;</code>，需要进行转码</li>
<li>使用 <code>iconv-lite</code> 模块进行转码，中文显示正常后开始解析源码，获取需要的 URL，为了更方便地解析，需要引进 <code>cheerio</code> 模块，<code>cheerio</code> 可以理解为运行在后台的 jQuery，用法与 jQuery 也十分相似，熟悉 jQuery 的同学可以很快的上手</li>
<li>将源码加载进 <code>cheerio</code>，分析了源码后得知所有章节信息都存于被 <code>div</code> 包裹的 <code>a</code> 标签中，通过 <code>cheerio</code> 取出符合条件的 <code>a</code> 标签组，进行遍历，获取章节的 title 和 URL，保存为对象，存进数组，(<strong>因为链接中存储的  URL 不完整，所以存储时需要补齐</strong>)</li>
<li>将对象数组序列化，写进 <code>list.json</code> 文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>)</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">"iconv-lite"</span>)</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.17fa.com/files/article/html/90/90747/index.html'</span></span><br><span class="line">http.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;  <span class="comment">//资源请求</span></span><br><span class="line">    <span class="keyword">var</span> chunks = []</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        chunks.push(chunk)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> html = iconv.decode(Buffer.concat(chunks), <span class="string">'gb2312'</span>) <span class="comment">//转码操作</span></span><br><span class="line">        <span class="keyword">var</span> $ = cheerio.load(html, &#123;</span><br><span class="line">            decodeEntities: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> content = $(<span class="string">"tbody"</span>)</span><br><span class="line">        <span class="keyword">var</span> links = []</span><br><span class="line">        $(<span class="string">'div'</span>).children(<span class="string">'a'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, elem</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> link = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">            link.title = $(<span class="keyword">this</span>).text()</span><br><span class="line">            link.link = <span class="string">'http://www.17fa.com/files/article/html/90/90747/'</span> + $(<span class="keyword">this</span>).attr(<span class="string">'href'</span>) <span class="comment">//补齐 URL 信息</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">                links.push(link)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        fs.writeFile(<span class="string">"list.json"</span>, <span class="built_in">JSON</span>.stringify(links), <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"写文件成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"网页访问出错"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>获取的列表示例</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"3 法医司白"</span>,</span><br><span class="line">    <span class="attr">"link"</span>: <span class="string">"http://www.17fa.com/files/article/html/90/90747/16548771.html"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"4 第1个梦 "</span>,</span><br><span class="line">    <span class="attr">"link"</span>: <span class="string">"http://www.17fa.com/files/article/html/90/90747/16548772.html"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"5 刑警韩沉 "</span>,</span><br><span class="line">    <span class="attr">"link"</span>: <span class="string">"http://www.17fa.com/files/article/html/90/90747/16548773.html"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"6 最初之战"</span>,</span><br><span class="line">    <span class="attr">"link"</span>: <span class="string">"http://www.17fa.com/files/article/html/90/90747/16548774.html "</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>有了 URLs 列表，接下来的工作就很机械了，遍历 URLs 列表请求资源，获取源码，解析源码，获取小说，写文件，<strong>但是</strong>，因为最终将所有的章节保存入一个文件，要保证章节的顺序，因此写文件需要 <strong>同步操作</strong>，实际上，我在编码的时候所有的操作都改成了同步方式</p>
<h4 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h4><p>通过解析读取的 <code>list.json</code> 文件，获取到 URLs 列表，遍历列表获取资源，因为需要确保章节的顺序，所以这里引进 <code>sync-request</code> 模块进行同步 request 请求资源，请求资源后照例转码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>)</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">"iconv-lite"</span>)</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'sync-request'</span>)</span><br><span class="line"><span class="keyword">var</span> urlList = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'list.json'</span>, <span class="string">'utf8'</span>))</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">chapter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = request(<span class="string">'GET'</span>,chapter.link)</span><br><span class="line">    <span class="keyword">var</span> html = iconv.decode(res.body, <span class="string">'gb2312'</span>) <span class="comment">//获取源码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; urlList.length; i++) &#123;</span><br><span class="line">    getContent(urlList[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="解析源码，获取小说"><a href="#解析源码，获取小说" class="headerlink" title="解析源码，获取小说"></a>解析源码，获取小说</h4><p>还是通过 <code>cheerio</code> 模块获取小说内容，避免影响观感，写操作之前去除内容中的的 html 标签<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">chapter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = request(<span class="string">'GET'</span>,chapter.link)</span><br><span class="line">    <span class="keyword">var</span> html = iconv.decode(res.body, <span class="string">'gb2312'</span>)</span><br><span class="line">    <span class="keyword">var</span> $ = cheerio.load(html, &#123;</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> content = ($(<span class="string">"div#r1c"</span>).text()).replace(<span class="regexp">/\&amp;nbsp;/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="保存小说"><a href="#保存小说" class="headerlink" title="保存小说"></a>保存小说</h4><p>写操作也需要同步操作，因此使用了同步写函数 <code>fs.writeFileSync()</code> 和 同步添加函数 <code>fs.appendFileSync()</code>，第一次写使用写函数，之后的内容都是进行 append 操作，<strong>为了改善阅读体验，每个章节前添加标题</strong><br><strong>也可以在内容前添加 拍 [TOC]，作为导航链接</strong></p>
<p><img src="http://source.lijundong.com/public/16-11-18/1946587.jpg" style="border-radius: 0.5rem;border:0;"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>)</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">"iconv-lite"</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> urlList = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'list.json'</span>, <span class="string">'utf8'</span>))</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">chapter</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(chapter.link)</span><br><span class="line">    http.get(chapter.link, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> chunks = []</span><br><span class="line">        res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">            chunks.push(chunk)</span><br><span class="line">        &#125;)</span><br><span class="line">        res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> html = iconv.decode(Buffer.concat(chunks), <span class="string">'gb2312'</span>)</span><br><span class="line">            <span class="keyword">var</span> $ = cheerio.load(html, &#123;</span><br><span class="line">                decodeEntities: <span class="literal">false</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">var</span> content = ($(<span class="string">"div#r1c"</span>).text()).replace(<span class="regexp">/\&amp;nbsp;/g</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="keyword">if</span> (fs.existsSync(<span class="string">'美人为馅.md'</span>)) &#123;</span><br><span class="line">                fs.appendFileSync(<span class="string">'美人为馅.md'</span>, <span class="string">'### '</span> + chapter.title)</span><br><span class="line">                fs.appendFileSync(<span class="string">'美人为馅.md'</span>, content)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fs.writeFileSync(<span class="string">'美人为馅.md'</span>, <span class="string">'### '</span> + chapter.title)</span><br><span class="line">                fs.appendFileSync(<span class="string">'美人为馅.md'</span>, content)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"爬取"</span> + chapter.link + <span class="string">"链接出错！"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; urlList.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(urlList[i])</span><br><span class="line">    getContent(urlList[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Markdown-转-PDF"><a href="#Markdown-转-PDF" class="headerlink" title="Markdown 转 PDF"></a>Markdown 转 PDF</h3><p>我将小说保存在 Markdown 文件中，为了提升阅读体验，可以将 Markdown 文件转换成 PDF 文件，目前我较为喜欢的两种方式，通过 Chrome 的打印功能 以及 pandoc 转换</p>
<h4 id="Chrome-打印"><a href="#Chrome-打印" class="headerlink" title="Chrome 打印"></a>Chrome 打印</h4><p>SublimeText 有个插件 <code>markdown preview</code> ，可通过 <code>Alt + m</code> 快捷键在 Chrome 中预览 Markdown，在 Chrome 页面中右键，选择打印，调整好参数后，选择另存为 PDF，简单，粗暴，深得我心<br><strong>打印效果：</strong><br><img src="http://source.lijundong.com/public/16-11-18/97144351.jpg" alt=""></p>
<h4 id="pandoc-转换"><a href="#pandoc-转换" class="headerlink" title="pandoc 转换"></a>pandoc 转换</h4><p>pandoc 是十分强大的文件格式转换工具，可以将 Markdown 文件转换成多种格式，今晚在 windows10 下折腾了半天，始终检索不到 pdflatex，关于 pandoc，后面会专门写一篇总结。 </p>
<p>PDF 已经发给老大了，现在正在看</p>
<h3 id="关于python、node、爬虫"><a href="#关于python、node、爬虫" class="headerlink" title="关于python、node、爬虫"></a>关于python、node、爬虫</h3><p>在之前很长的一段时间里，很想用 Python，很想写爬虫，更想用 Python 写爬虫，甚至成为了心里的一块执念，随着接触的知识更全面，执念也逐渐淡去，少了很多“想”，遇事想着多去动手，实践出真知。</p>
<hr>
<p><em>talk is cheap, show me your code</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为剧荒，老大追了爱奇艺的一部网剧，由丁墨的同名小说《美人为馅》改编，目前已经放出两季，虽然整部剧槽点满满，但是老大看得不亦乐乎，并且在看完第二季之后跟我要小说资源，直接要奔原著去看结局……&lt;br&gt;随手搜了下，都是在线资源，下载的话需要登录，注册登录好麻烦，写个爬虫玩玩也好，于是动手用 node 写了一个，这里做下笔记&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="http://lijundong.com/categories/node/"/>
    
    
      <category term="node" scheme="http://lijundong.com/tags/node/"/>
    
      <category term="爬虫" scheme="http://lijundong.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="小说" scheme="http://lijundong.com/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>前端开发自动化之 Gulp</title>
    <link href="http://lijundong.com/develop-automatic-gulp-set/"/>
    <id>http://lijundong.com/develop-automatic-gulp-set/</id>
    <published>2016-10-29T07:05:36.000Z</published>
    <updated>2016-10-29T09:03:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>越来越意识到开发的规范化的重要性，以及自动化带来的高效，前端开发环境自动化构建的技能是必须要 get 的，于是最近用了一个 demo 完整的跑了一遍 Gulp 的前端开发自动化，体验很棒，这里记录下。<br>努力向规范看齐，向大牛看齐，多去了解，多去接触，视野开阔才能看到更远的风景，会有更多的可能。<br><a id="more"></a></p>
<h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><p>技术的进击的过程相似于打怪升级买装备，初级拿把小米步枪就可以制霸方圆，升级之后遇到高手才发现没几把 AK 都不好意思跟人打招呼，再升级之后，发现二营长的意大利炮还是要有的，哈哈。<br>学习前端以来都是自己一个人折腾，学的不系统，做的项目也都是小打小闹，一直没接触到自动化，第一次看介绍 Grunt 的文章时，因为应用水平太低，反复看了三遍才稍微理解开发环境自动化，但是一直没机会应用，这次做个笔记先，关于使用 grunt、gulp还是 webpack，我的观点是，你在纠结的时候，我已经开始上代码了……</p>
<h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-/dist</span></span><br><span class="line"><span class="string">|-/src</span></span><br><span class="line"><span class="string">|--`css</span></span><br><span class="line"><span class="string">|--`images</span></span><br><span class="line"><span class="string">|--`js</span></span><br><span class="line"><span class="string">|--`less</span></span><br><span class="line"><span class="string">|-gulpfile.js</span></span><br><span class="line"><span class="string">|-package.json</span></span><br></pre></td></tr></table></figure>
<h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><p>技术选型的时候，不求最新最炫，我考虑的首要因素是合适，之所以选择 gulp，首先是上手较 grunt 简单，而且插件已经很丰富了，而且目前我应用的场景没必要使用 webpack。<br>Gulp 以及所用到的插件的安装都是通过 npm 。</p>
<h3 id="gulpfile-js-配置"><a href="#gulpfile-js-配置" class="headerlink" title="gulpfile.js 配置"></a>gulpfile.js 配置</h3><p>类似于 package.json，gulpfile.js 是gulp的配置文件，在文件中引入插件，以及自定义指令。</p>
<h4 id="gulp-插件"><a href="#gulp-插件" class="headerlink" title="gulp 插件"></a>gulp 插件</h4><p>gulp 丰富的插件可以满足目前开发环境中遇到的大部分需求，我这里列了几个插件，只是目前需要的，有新需求时再补充，如果你想找插件，直接去 <a href="http://npmjs.com/" target="_blank" rel="external">npm 官网</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>)</span><br><span class="line"><span class="comment">// 编译 less</span></span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">"gulp-less"</span>)</span><br><span class="line"><span class="comment">// 压缩 css 代码</span></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">"gulp-clean-css"</span>)</span><br><span class="line"><span class="comment">// 压缩 js 代码</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>)</span><br><span class="line"><span class="comment">// 合并文件</span></span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>)</span><br><span class="line"><span class="comment">// 神器，浏览器自动刷新</span></span><br><span class="line"><span class="keyword">var</span> browserSync = <span class="built_in">require</span>(<span class="string">"browser-sync"</span>).create()</span><br><span class="line"><span class="keyword">var</span> reload = browserSync.reload;</span><br></pre></td></tr></table></figure></p>
<h4 id="配置开发环境-dev"><a href="#配置开发环境-dev" class="headerlink" title="配置开发环境  dev"></a>配置开发环境  dev</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css:dev 命令 将 /src 中的 css 移动到 /dist 并刷新页面</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'css:dev'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/css/*.css'</span>)</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'dist/static/css'</span>))</span><br><span class="line">        <span class="selector-class">.pipe</span>(reload(&#123;</span><br><span class="line">            <span class="attribute">stream</span>: true</span><br><span class="line">        &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// less:dev 命令 编译 less，移动到 /dist 并刷新页面</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'less:dev'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/less/*.less'</span>)</span><br><span class="line">        <span class="selector-class">.pipe</span>(less())</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'dist/static/css'</span>))</span><br><span class="line">        <span class="selector-class">.pipe</span>(reload(&#123;</span><br><span class="line">            <span class="attribute">stream</span>: true</span><br><span class="line">        &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// js:dev 命令 移动 js 并刷新页面</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'js:dev'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/js/*.js'</span>)</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'dist/static/js'</span>))</span><br><span class="line">        <span class="selector-class">.pipe</span>(reload(&#123;</span><br><span class="line">            <span class="attribute">stream</span>: true</span><br><span class="line">        &#125;))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// dev 命令，执行 js:dev less:dev css:dev 并启动 browserSync 监听 /src 下的 js、less、css代码</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'dev'</span>, [<span class="string">'js:dev'</span>, <span class="string">'less:dev'</span>, <span class="string">'css:dev'</span>], function() &#123;</span><br><span class="line">    <span class="selector-tag">browserSync</span><span class="selector-class">.init</span>(&#123;</span><br><span class="line">        <span class="attribute">server</span>: &#123;</span><br><span class="line">            <span class="attribute">baseDir</span>: <span class="string">'/'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attribute">notify</span>: false</span><br><span class="line">    &#125;)</span><br><span class="line">    gulp<span class="selector-class">.watch</span>(<span class="string">'src/js/*.js'</span>, [<span class="string">'js:dev'</span>])</span><br><span class="line">    <span class="selector-tag">gulp</span><span class="selector-class">.watch</span>(<span class="string">'src/less/*.less'</span>, [<span class="string">'less:dev'</span>])</span><br><span class="line">    <span class="selector-tag">gulp</span><span class="selector-class">.watch</span>(<span class="string">'src/css/*.css'</span>, [<span class="string">'css:dev'</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h4><p>打包上线时，可以将多个文件压缩(模板、css、css)、合并(css、js)，减少请求</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css 压缩合并</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'css'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/css/*.css'</span>)</span><br><span class="line">        <span class="selector-class">.pipe</span>(autoprefixer())</span><br><span class="line">        <span class="selector-class">.pipe</span>(minifycss())</span><br><span class="line">        <span class="selector-class">.pipe</span>(concat(<span class="string">"all.min.css"</span>))</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'dist/static/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// less 编译、压缩</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'less'</span>, function() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">gulp</span><span class="selector-class">.src</span>(<span class="string">'src/less/*.less'</span>)</span><br><span class="line">        <span class="selector-class">.pipe</span>(less())</span><br><span class="line">        <span class="selector-class">.pipe</span>(minifycss())</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'dist/static/css'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// js 压缩 合并</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'js'</span>, function() &#123;</span><br><span class="line">    return gulp<span class="selector-class">.src</span>(<span class="string">'src/js/*.js'</span>)</span><br><span class="line">        <span class="selector-class">.pipe</span>(uglify())</span><br><span class="line">        <span class="selector-class">.pipe</span>(concat(<span class="string">"all.min.js"</span>))</span><br><span class="line">        <span class="selector-class">.pipe</span>(gulp.dest(<span class="string">'dist/static/js'</span>))</span><br><span class="line">        <span class="selector-class">.pipe</span>(uglify())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 一键打包</span></span><br><span class="line"><span class="selector-tag">gulp</span><span class="selector-class">.task</span>(<span class="string">'build'</span>, [<span class="string">'css'</span>, <span class="string">'less'</span>, <span class="string">'js'</span>])</span><br></pre></td></tr></table></figure>
<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p><code>gulp dev</code> <strong>开发环境</strong>，gulp 监听 /src 下的修改，更新数据，刷新浏览器，查看预览<br>功能开发结束，<strong>打包</strong><br><code>gulp build</code> 打包，编译，压缩文件<br><strong>上线</strong></p>
<p>参考:</p>
<ul>
<li><a href="http://www.jianshu.com/p/cc1cb9a5650c" target="_blank" rel="external">入门：十分钟自动化构建</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;越来越意识到开发的规范化的重要性，以及自动化带来的高效，前端开发环境自动化构建的技能是必须要 get 的，于是最近用了一个 demo 完整的跑了一遍 Gulp 的前端开发自动化，体验很棒，这里记录下。&lt;br&gt;努力向规范看齐，向大牛看齐，多去了解，多去接触，视野开阔才能看到更远的风景，会有更多的可能。&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://lijundong.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="http://lijundong.com/tags/gulp/"/>
    
      <category term="前端开发" scheme="http://lijundong.com/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>解决 Google 重定向，体验 Google 本味</title>
    <link href="http://lijundong.com/google-no-country-redirect-disabled/"/>
    <id>http://lijundong.com/google-no-country-redirect-disabled/</id>
    <published>2016-10-20T13:30:19.000Z</published>
    <updated>2016-11-17T14:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于不可抗力的缘故，每过一段时间，Google 就会重新被拿出来说一次，上一次说的是入门之法，关于 VPN 和 Shadowsocks 的一些很基础的东西。<br>最近小飞机换了更快的香港的服务器，体验非常棒，但是在使用 Google 时，Google 为了提供更好的本地搜索体验，<code>google.com</code> 会自动重定向到 <code>google.com.hk</code> ，可惜这些体验只有身在香港的服务器才能体验，而身在天朝的我还需要去考虑 <code>google country redirect disable</code>。<br><a id="more"></a><br>想要体验原汁原味的 Google(google.com)，下面的方案是我用过的较方便的方案。<br><strong>欢迎更正及补充</strong></p>
<h3 id="Chrome-扩展"><a href="#Chrome-扩展" class="headerlink" title="Chrome 扩展"></a>Chrome 扩展</h3><p>Chrone 商店有一款禁止重定向的扩展 <a href="https://chrome.google.com/webstore/detail/nocountryredirect-ncr/ciboebddidackjicoeoiigdnbmchkdll?hl=en" target="_blank" rel="external">NoCountryRedirect (NCR)</a><br>这款插件是将重定向后的 <code>google.com.hk</code> 再重定向到 <code>google.com</code>，虽然有效，但是多次重定向导致页面相应变慢，体验不太好，装完体验两分钟就卸了<br>优点：安装方便<br>缺点：导致 Google 访问速度变得很慢</p>
<h3 id="手动-google-com-ncr"><a href="#手动-google-com-ncr" class="headerlink" title="手动 google.com/ncr"></a>手动 google.com/ncr</h3><p>可以通过手动 ncr(no country redirect) 来强制禁止重定向，我将这个 url 设置了书签。</p>
<h3 id="设置默认搜索引擎"><a href="#设置默认搜索引擎" class="headerlink" title="设置默认搜索引擎"></a>设置默认搜索引擎</h3><p>Chrome –&gt; 设置 -&gt; 搜索 -&gt; 管理搜索引擎 –&gt; 其他搜索引擎<br>拉到最下，有一个“添加新的搜索引擎”，参数如下</p>
<blockquote>
<p>名字：google.com<br>关键字: Google-ncr<br>url: <a href="http://www.google.com/search?q=%s" target="_blank" rel="external">http://www.google.com/search?q=%s</a></p>
</blockquote>
<p>配置完设置为默认搜索引擎，完成</p>
<p><em>人生苦短，我用 Google</em></p>
<hr>
<p>新的 MBP 一周后发布，等了大半年，终于等来了，下面的事情就是存钱了，Fighting！</p>
<p><em>人生苦短，我用 Mac</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于不可抗力的缘故，每过一段时间，Google 就会重新被拿出来说一次，上一次说的是入门之法，关于 VPN 和 Shadowsocks 的一些很基础的东西。&lt;br&gt;最近小飞机换了更快的香港的服务器，体验非常棒，但是在使用 Google 时，Google 为了提供更好的本地搜索体验，&lt;code&gt;google.com&lt;/code&gt; 会自动重定向到 &lt;code&gt;google.com.hk&lt;/code&gt; ，可惜这些体验只有身在香港的服务器才能体验，而身在天朝的我还需要去考虑 &lt;code&gt;google country redirect disable&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://lijundong.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="google" scheme="http://lijundong.com/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>升级笔记本 CPU</title>
    <link href="http://lijundong.com/update-laptop-cpu/"/>
    <id>http://lijundong.com/update-laptop-cpu/</id>
    <published>2016-10-12T06:18:44.000Z</published>
    <updated>2016-11-12T08:39:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>大二在小组的时候，身边几个伙伴相继换了固态，并且极力怂恿我也换，高呼固态大法好，时常拿十秒内的开机速度来做碾压，当时对于硬盘读写性能没有直观感受，觉得开机慢点也没所谓。<br>后面做的事多起来，任务开得多，Chrome 经常几十个 Tab 同时开，导致磁盘开机就爆红，鼠标动动都困难，更别提编码了，这时候才意识到笔记本需要升级，于是加装了固态，随即内存就成了瓶颈，又把内存加装到 8G，这之后相安无事过了很久。但该来的总是要来的，满频只有 1.8GHz 的赛扬终于满足不了正常的开发需要，这就换了它。<br><a id="more"></a></p>
<h3 id="ThinkPad-E531-配置"><a href="#ThinkPad-E531-配置" class="headerlink" title="ThinkPad E531 配置"></a>ThinkPad E531 配置</h3><p>现在用的电脑的是 ThinkPad E531，是高考后暑假和跃峰在合肥电脑城入的，两个小白在那被坑了不少钱，跃峰比我惨一些，他买电脑的那家铺子在某个夜深人静时分，人去摊空……<br>我入的 E531 应该是低配版，处理器是<code>Celeron® Processor 1000M 
(2M Cache, 1.80 GHz)</code>，500G 机械，4GB 内存，核显。这个配置决定了大学里的我跟游戏彻底绝缘。<br>升级过三次，加装了 <code>Samsung 850 EVO 120G</code> 的固态，加上支架，￥420 的开销，加装的内存是花 ￥80 从秦望那入的二手 4GB 三星。现在用的处理器因为是 <code>HM 77</code> 的主板，最多只能上三代的处理器，在淘宝上找了好几家才找到，考虑到散热的问题，最后选了 <code>i5-3320M @ 2.6GHz</code> 最高可以睿频到 3.2GHz，换上之后世界彻底变的和谐了，又可以愉快的编码了。<br>这里记录下过程中的一些<strong>需要提前考虑的事项</strong>。</p>
<h3 id="笔记本的-CPU-是否支持升级？"><a href="#笔记本的-CPU-是否支持升级？" class="headerlink" title="笔记本的 CPU 是否支持升级？"></a>笔记本的 CPU 是否支持升级？</h3><blockquote>
<p>可以确定的是封装方式为PGA方式的处理器是可以升级的，BGA封装是直接焊在主板上面的，所以不可更换。大部分超极本为了获得更可观的厚度和更优秀的散热表现都采用了BGA封装方式的低压处理器，所以是不可更换的。从命名方式上直观地来看，以字母M以及QM、MQ、MX等结尾的处理器是可更换的，以字母U、Y以及HQ结尾的处理器是不可更换的。</p>
</blockquote>
<h3 id="CPU-和主板的兼容性"><a href="#CPU-和主板的兼容性" class="headerlink" title="CPU 和主板的兼容性"></a>CPU 和主板的兼容性</h3><p>选择 CPU 之前需要确定现有主板兼容的 CPU 型号。</p>
<h3 id="CPU-参数如何看"><a href="#CPU-参数如何看" class="headerlink" title="CPU 参数如何看"></a>CPU 参数如何看</h3><p>以 Intel 三代移动式处理器作例子<br><img src="http://www.intel.cn/content/dam/www/public/cn/zh/images/illustrations/RWD/processor-number-core-i7-3770k-3920xm-rwd.png/_jcr_content/renditions/intel.web.480.270.png" style="border:0"><br><strong>关于数字</strong>：<br>第一位代表第几代CPU，一般越大，架构更优。i7-4770K &gt; i7-3770K<br>第二位代表处理器等级，数字越大，性能越好。i7-4810mq &gt; i7-4710mq<br>第三位代表核显，可忽略不比<br>第四位代表功耗可忽略不比</p>
<p><strong>关于后缀</strong>: </p>
<table>
<thead>
<tr>
<th>字母后缀</th>
<th>描述</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>M</td>
<td>移动式</td>
<td>i7-3520M</td>
</tr>
<tr>
<td>QM</td>
<td>四核移动式</td>
<td>i7-3820QM</td>
</tr>
<tr>
<td>U</td>
<td>超低功耗</td>
<td>i7-3667U</td>
</tr>
<tr>
<td>Y</td>
<td>极低功耗</td>
<td>i7-3689Y</td>
</tr>
</tbody>
</table>
<p>更详细内容可以去 <a href="http://www.intel.cn/content/www/cn/zh/processors/processor-numbers.html#" target="_blank" rel="external">Intel 官网</a> 获取</p>
<h3 id="安装注意"><a href="#安装注意" class="headerlink" title="安装注意"></a>安装注意</h3><p>安装的时候除了手残带来的问题外，需要注意导热硅胶的选择与涂抹，这关乎 CPU 的散热，<strong>很重要</strong>，淘宝和京东上二十几可以淘一个靠谱的，如果自己上手不放心，可以花十块找维修人员，分分钟解决，快捷省心。</p>
<hr>
<p>开销不到 1K 来升级这台电脑很超值，提升了开发的幸福感。效率更高，这应该是最后一次升级这个笔记本，努力赚钱买 MBP 才是王道，讲真，ThinkPad 的键盘真心好用。</p>
<p>参考:</p>
<ul>
<li><a href="http://www.pcpop.com/doc/1/1025/1025099_all.shtml" target="_blank" rel="external">繁琐但不困难 笔记本升级CPU实战教程</a></li>
<li><a href="http://www.intel.cn/content/www/cn/zh/processors/processor-numbers.html" target="_blank" rel="external">关于英特尔® 处理器编号</a></li>
<li><a href="https://www.zhihu.com/question/21366606" target="_blank" rel="external">intel处理器型号是怎么命名的？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大二在小组的时候，身边几个伙伴相继换了固态，并且极力怂恿我也换，高呼固态大法好，时常拿十秒内的开机速度来做碾压，当时对于硬盘读写性能没有直观感受，觉得开机慢点也没所谓。&lt;br&gt;后面做的事多起来，任务开得多，Chrome 经常几十个 Tab 同时开，导致磁盘开机就爆红，鼠标动动都困难，更别提编码了，这时候才意识到笔记本需要升级，于是加装了固态，随即内存就成了瓶颈，又把内存加装到 8G，这之后相安无事过了很久。但该来的总是要来的，满频只有 1.8GHz 的赛扬终于满足不了正常的开发需要，这就换了它。&lt;br&gt;
    
    </summary>
    
      <category term="生活" scheme="http://lijundong.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="cpu" scheme="http://lijundong.com/tags/cpu/"/>
    
      <category term="笔记本" scheme="http://lijundong.com/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置多个 Node 服务的域名</title>
    <link href="http://lijundong.com/nginx-conficure-domains-to-servers/"/>
    <id>http://lijundong.com/nginx-conficure-domains-to-servers/</id>
    <published>2016-10-11T16:15:48.000Z</published>
    <updated>2017-02-06T06:47:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近用 Node 写的两个小项目都需要上线，项目跑在阿里云上，给了不同的端口，平时在各自的端口上，相安无事，但是要挂在微信公号上就需要域名，IP只有一个，两个域名势必要搭起来，我资历尚浅，肯定劝不动他俩，不看僧面看佛面，只好请来神器 Nginx 主持公道。这里做个笔记，欢迎补充指正。<br><a id="more"></a></p>
<h3 id="Domains-2-Servers-？"><a href="#Domains-2-Servers-？" class="headerlink" title="Domains-2-Servers ？"></a>Domains-2-Servers ？</h3><p>多个 Domain 需要对应多个 Node 服务，然而只有一个 IP，这还怎么谈？矛盾尖锐到无法解决的时候就需要中间人介入，和气生财嘛，Nginx 在中间人这个位置做的得心应手，擅长的领域有以下几点</p>
<ul>
<li>页面服务器</li>
<li>负载均衡</li>
<li>web 缓存加速</li>
<li>反向代理</li>
</ul>
<p>这起纠纷需要用到反向代理根据请求的 URL 将请求转到不同的服务器，以达到多个服务和谐共处的环境</p>
<h3 id="Nginx-安装-amp-常用命令"><a href="#Nginx-安装-amp-常用命令" class="headerlink" title="Nginx 安装 &amp; 常用命令"></a>Nginx 安装 &amp; 常用命令</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我比较懒，用 yum 安装，快捷方便</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote>
<ul>
<li>nginx -s stop    快速关闭</li>
<li>nginx -s quit     优雅地关闭</li>
<li>nginx -s reopen   重新打开日志</li>
<li>nginx -s reload   平滑重启</li>
<li>nginx -t          启动前测试</li>
</ul>
</blockquote>
<p>如果用包管理器进行的安装，也可以通过 service 来操作 Nginx </p>
<blockquote>
<ul>
<li>service nginx start</li>
<li>service nginx stop</li>
<li>service nginx restart</li>
<li>service nginx reload</li>
</ul>
</blockquote>
<h3 id="Nginx-配置文件"><a href="#Nginx-配置文件" class="headerlink" title="Nginx 配置文件"></a>Nginx 配置文件</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统: <span class="selector-tag">CentOS</span> 7  </span><br><span class="line"><span class="selector-tag">Nginx</span>: 1<span class="selector-class">.10</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure>
<h4 id="检查-nginx-conf"><a href="#检查-nginx-conf" class="headerlink" title="检查 nginx.conf"></a>检查 nginx.conf</h4><p>进入 <code>/etc/nginx/</code> 路径下，路径下的 <code>nginx.conf</code> 是 Nginx 的配置文件，还有 <code>/conf.d</code> 文件夹存放的是 Server 的设置(<strong>注</strong>：这里的 <code>/conf.d</code> 在较早的版本里是 <code>/sites-available</code>)</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//nginx.conf 文件末尾对 /conf.d 中配置文件的应用，如果这一行被注释了，请把注释去除</span></span><br><span class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/conf.d/</span>*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是 /sites-available</span></span><br><span class="line"><span class="keyword">include</span> <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-available/</span>*.conf</span><br></pre></td></tr></table></figure>
<h4 id="新建-Server-配置文件"><a href="#新建-Server-配置文件" class="headerlink" title="新建 Server 配置文件"></a>新建 Server 配置文件</h4><p>配置文件确认没有问题了，现在需要在 <code>/conf.d</code> 目录下配置服务器和对应的域名，我这里新建两个文件 <code>lushi.conf</code> 和 <code>mark.conf</code> (文件名随意，注意是 <code>.conf</code> 文件)以对应我需要配置的两个域名，分别的配置如下<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//lushi.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name lushi.lijundong.com;</span><br><span class="line">    access_log /<span class="keyword">var</span>/<span class="keyword">log</span>/nginx/domain1.access.<span class="keyword">log</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass    http:<span class="comment">//127.0.0.1:3000/;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mark.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name <span class="keyword">mark</span>.lijundong.com;</span><br><span class="line">    access_log /<span class="keyword">var</span>/<span class="keyword">log</span>/nginx/domain1.access.<span class="keyword">log</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass    http:<span class="comment">//127.0.0.1:3100/;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="重载配置文件"><a href="#重载配置文件" class="headerlink" title="重载配置文件"></a>重载配置文件</h4><p>之前介绍的命令在这里就可以用了，<code>nginx -s reload</code> 重载配置文件，现在访问配置好的两个域名，又回到了相安无事的年代</p>
<p>参考:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/5009324/node-js-nginx-what-now" target="_blank" rel="external">Node.js + Nginx - What now?</a></li>
<li><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/commandline/" target="_blank" rel="external">Nginx</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用 Node 写的两个小项目都需要上线，项目跑在阿里云上，给了不同的端口，平时在各自的端口上，相安无事，但是要挂在微信公号上就需要域名，IP只有一个，两个域名势必要搭起来，我资历尚浅，肯定劝不动他俩，不看僧面看佛面，只好请来神器 Nginx 主持公道。这里做个笔记，欢迎补充指正。&lt;br&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://lijundong.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="服务器" scheme="http://lijundong.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="nginx" scheme="http://lijundong.com/tags/nginx/"/>
    
      <category term="域名" scheme="http://lijundong.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>EJS渲染模板</title>
    <link href="http://lijundong.com/embeded-javascript-templates/"/>
    <id>http://lijundong.com/embeded-javascript-templates/</id>
    <published>2016-09-01T03:05:56.000Z</published>
    <updated>2016-10-11T18:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间一直在使用 Express 框架，虽然官方推荐 Pug 作为模板引擎，但我还是对 EJS 更感冒，官方也提供了 <code>Express -e</code> 的选择，由于之前没有认真看文档，导致了前段时间遇到的一个渲染问题，纠结了很久才得以解决，这里笔记下 EJS 的常用方法，算作一次梳理，欢迎补充指正。<br><a id="more"></a></p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ul>
<li><code>&lt;%=</code>: 转义输出</li>
<li><code>&lt;%-</code>: 不转义输出(即输出源码)</li>
<li><code>&lt;%#</code>: 评论注释</li>
<li><code>&lt;%</code>: 输出 JS</li>
<li><code>&lt;%_</code>: 输出 JS 并且删除标签之前所有的空格</li>
<li><code>%&gt;</code>: 正常闭标签</li>
<li><code>-%&gt;</code>: 移除标签后的换行符</li>
<li><code>_%&gt;</code>: 移除便签后的所有的空格</li>
</ul>
<h3 id="实例对比"><a href="#实例对比" class="headerlink" title="实例对比"></a>实例对比</h3><p><strong>EJS</strong><br><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">- myHtml </span><span class="xml"><span class="tag">%&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"> myHtml </span><span class="xml"><span class="tag">%&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%</span></span></span><span class="perl"><span class="comment"># comment </span></span><span class="xml"><span class="tag">%&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">%</span></span></span><span class="perl">- myMaliciousHtml </span><span class="xml"><span class="tag">%&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">%=</span></span></span><span class="perl"> myMaliciousHtml </span><span class="xml"><span class="tag">%&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p><strong>Locals</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "myHtml": "<span class="tag">&lt;<span class="name">strong</span>&gt;</span>Leeon<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>"</span><br><span class="line">, "myMaliciousHtml": "<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>HTML</strong><br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;p&gt;</span>Hello, <span class="params">&lt;strong&gt;</span>Leeon<span class="params">&lt;/strong&gt;</span>.<span class="params">&lt;/p&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span>Hello, <span class="variable">&amp;lt</span>;strong<span class="variable">&amp;gt</span>;Leeon<span class="variable">&amp;lt</span>;/strong<span class="variable">&amp;gt</span>;.<span class="params">&lt;/p&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span><span class="params">&lt;/p&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span>Hello, <span class="params">&lt;/p&gt;</span><span class="params">&lt;script&gt;</span>document.write()<span class="params">&lt;/script&gt;</span><span class="params">&lt;p&gt;</span>.<span class="params">&lt;/p&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span>Hello, <span class="variable">&amp;lt</span>;/p<span class="variable">&amp;gt</span>;<span class="variable">&amp;lt</span>;script<span class="variable">&amp;gt</span>;document.write()<span class="variable">&amp;lt</span>;/script<span class="variable">&amp;gt</span>;<span class="variable">&amp;lt</span>;p<span class="variable">&amp;gt</span>;.<span class="params">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>参考：</p>
<ul>
<li><a href="https://github.com/mde/ejs/blob/master/docs/syntax.md" target="_blank" rel="external">官方文档</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间一直在使用 Express 框架，虽然官方推荐 Pug 作为模板引擎，但我还是对 EJS 更感冒，官方也提供了 &lt;code&gt;Express -e&lt;/code&gt; 的选择，由于之前没有认真看文档，导致了前段时间遇到的一个渲染问题，纠结了很久才得以解决，这里笔记下 EJS 的常用方法，算作一次梳理，欢迎补充指正。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://lijundong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ejs" scheme="http://lijundong.com/tags/ejs/"/>
    
  </entry>
  
  <entry>
    <title>虚拟按键手机页面高度自适应</title>
    <link href="http://lijundong.com/huawei-phone-browser-height-self-adapt/"/>
    <id>http://lijundong.com/huawei-phone-browser-height-self-adapt/</id>
    <published>2016-08-31T12:34:44.000Z</published>
    <updated>2017-02-06T06:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>华为系手机、谷歌亲儿子 Nexus 系列等配备的都是虚拟按键，虚拟按键唤出与隐藏会导致页面的高度变化，如果没有对内容高度进行适应，会出现页面内容被覆盖，或者页面空出一段留白，实验室用华为的同学挺多的，包括我，所以难免在调试页面的时候遇到这个问题，做个笔记先，欢迎补充指正。<br><a id="more"></a></p>
<p>其实原理很简单，要达到的效果是底部 Tab 随着虚拟按键的变化而适应。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tab</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;华为系手机、谷歌亲儿子 Nexus 系列等配备的都是虚拟按键，虚拟按键唤出与隐藏会导致页面的高度变化，如果没有对内容高度进行适应，会出现页面内容被覆盖，或者页面空出一段留白，实验室用华为的同学挺多的，包括我，所以难免在调试页面的时候遇到这个问题，做个笔记先，欢迎补充指正。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://lijundong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="自适应" scheme="http://lijundong.com/tags/%E8%87%AA%E9%80%82%E5%BA%94/"/>
    
      <category term="移动开发" scheme="http://lijundong.com/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Input 的 accept 属性以及 MIME 参考</title>
    <link href="http://lijundong.com/accept-in-input-and-mime-intro/"/>
    <id>http://lijundong.com/accept-in-input-and-mime-intro/</id>
    <published>2016-08-28T07:03:11.000Z</published>
    <updated>2016-12-18T15:55:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做上传文件模块时，对 input 的 accept 属性做了些了解，以及与其关联的 MIME，之前也了解过，只是没做理解，导致如今再看到竟然没有半点印象，其实就是个因特网标准，这次做下笔记，欢迎指正。</p>
<a id="more"></a>
<h3 id="关于-accept"><a href="#关于-accept" class="headerlink" title="关于 accept"></a>关于 accept</h3><p>当 <code>input</code> 的 <code>type</code> 定义为 <code>file</code> 时，<code>accpet</code> 属性给客户端传递一种信息，哪些文件格式是可被接受的，在进行文件选择时，客户端只会匹配可接受格式的文件供选择，给用户提供了很大的方便。</p>
<p>用法：<br><code>&lt;input accept=&quot;value&quot;&gt;</code><br>value 是逗号隔开的 MIME 类型列表。</p>
<p>举例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>匹配所有图片格式、视频格式、音频文件、文本格式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*,video/*,audio/*,text/*"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>匹配 xls xlsx 两种表格文件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">".xlsx,.xls"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="关于-MIME"><a href="#关于-MIME" class="headerlink" title="关于 MIME"></a>关于 MIME</h3><p>MIME 是什么？一句话描述，MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。</p>
<p>没了？没了。</p>
<p>类型包括 application(pdf\doc\xls\ppt……)、image(jpg\png\gif……)、audio(mp3\mid\wav\bom……)、video(avi\movie\mpg……)、text(css\html\c\h……)、x-world(flr\wrl\wrz……)等</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做上传文件模块时，对 input 的 accept 属性做了些了解，以及与其关联的 MIME，之前也了解过，只是没做理解，导致如今再看到竟然没有半点印象，其实就是个因特网标准，这次做下笔记，欢迎指正。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://lijundong.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://lijundong.com/tags/html/"/>
    
      <category term="mime" scheme="http://lijundong.com/tags/mime/"/>
    
      <category term="input" scheme="http://lijundong.com/tags/input/"/>
    
      <category term="accept" scheme="http://lijundong.com/tags/accept/"/>
    
  </entry>
  
  <entry>
    <title>常用速查表集合</title>
    <link href="http://lijundong.com/sheets-collections/"/>
    <id>http://lijundong.com/sheets-collections/</id>
    <published>2016-08-23T07:57:21.000Z</published>
    <updated>2017-02-12T07:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">这个资源合集包含的是我用着不错的常用速查表<br>方便有需要的同学查找<br>持续更新<br>以后可能会有更多的集合<br>Chrome 扩展？<br>开发小工具？<br>你说呢？</blockquote>

<a id="more"></a>
<h3 id="Linux-命令速查"><a href="#Linux-命令速查" class="headerlink" title="Linux 命令速查"></a>Linux 命令速查</h3><p><img src="http://source.lijundong.com/16-8-23/3279812.jpg" alt=""><br><a href="http://i.linuxtoy.org/files/pdf/fwunixref.pdf" target="_blank" rel="external">PDF 下载</a></p>
<h3 id="Vim-命令速查"><a href="#Vim-命令速查" class="headerlink" title="Vim 命令速查"></a>Vim 命令速查</h3><p><img src="http://source.lijundong.com/16-8-23/89959675.jpg" alt=""><br><a href="http://jrmiii.com/attachments/Vim.pdf" target="_blank" rel="external">PDF 下载</a></p>
<h3 id="Git-命令速查"><a href="#Git-命令速查" class="headerlink" title="Git 命令速查"></a>Git 命令速查</h3><p><img src="http://source.lijundong.com/16-8-23/44995875.jpg" alt=""><br><a href="https://www.git-tower.com/blog/git-cheat-sheet-cn" target="_blank" rel="external">PDF 下载</a></p>
<h3 id="正则速查"><a href="#正则速查" class="headerlink" title="正则速查"></a>正则速查</h3><p><img src="http://source.lijundong.com/16-8-23/94278931.jpg" alt=""><br><a href="http://plcdn.qiniudn.com/wp-content/uploads/2011/12/regular-expressions-cheat-sheet-v2.pdf" target="_blank" rel="external">PDF 下载</a></p>
<blockquote class="blockquote-center">欢迎补充！</blockquote>



]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;这个资源合集包含的是我用着不错的常用速查表&lt;br&gt;方便有需要的同学查找&lt;br&gt;持续更新&lt;br&gt;以后可能会有更多的集合&lt;br&gt;Chrome 扩展？&lt;br&gt;开发小工具？&lt;br&gt;你说呢？&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://lijundong.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="git" scheme="http://lijundong.com/tags/git/"/>
    
      <category term="vim" scheme="http://lijundong.com/tags/vim/"/>
    
      <category term="linux" scheme="http://lijundong.com/tags/linux/"/>
    
      <category term="正则" scheme="http://lijundong.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Node将Excel数据解析为Json</title>
    <link href="http://lijundong.com/xlsx-to-json-by-json/"/>
    <id>http://lijundong.com/xlsx-to-json-by-json/</id>
    <published>2016-08-22T07:00:50.000Z</published>
    <updated>2017-02-12T07:44:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>试想这样一种情况，一个不熟悉技术的人需要在网站中展示他存在 Excel 里的数据，数据量很大，人工操作很繁琐，且容易出错，如果要做到用户友好，程序的任务是读入 Excel，解析，以正确的格式存入数据库。<br>在 Java 环境下，可以用 <code>Apache POI</code> 来操作 office 全家桶的读写，我不熟悉Java，所以这篇文章就记录下用 NodeJS 解析 Excel(xlsx 格式)数据为Json格式。<br><a id="more"></a></p>
<h3 id="node-xlsx"><a href="#node-xlsx" class="headerlink" title="node-xlsx"></a>node-xlsx</h3><p>这篇文章是建立在 <code>node-xlsx</code> 的基础上的，你可以在 <a href="https://github.com/mgcrea/node-xlsx" target="_blank" rel="external">github</a> 以及 <a href="https://www.npmjs.com/package/node-xlsx" target="_blank" rel="external">npm</a> 获取到包。<br>用法如下：</p>
<h4 id="xlsx-gt-Json"><a href="#xlsx-gt-Json" class="headerlink" title="xlsx -&gt; Json"></a>xlsx -&gt; Json</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xlsx = <span class="built_in">require</span>(<span class="string">'node-xlsx'</span>).default; </span><br><span class="line"><span class="comment">//Or import xlsx from 'node-xlsx';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse a buffer</span></span><br><span class="line"><span class="keyword">const</span> workSheetsFromBuffer = xlsx.parse(fs.readFileSync(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/myFile.xlsx`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse a file</span></span><br><span class="line"><span class="keyword">const</span> workSheetsFromFile = xlsx.parse(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/myFile.xlsx`</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Json-gt-xlsx"><a href="#Json-gt-xlsx" class="headerlink" title="Json -&gt; xlsx"></a>Json -&gt; xlsx</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xlsx = <span class="built_in">require</span>(<span class="string">'node-xlsx'</span>).default;</span><br><span class="line"><span class="comment">// Or import xlsx from 'node-xlsx';</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="string">'sheetjs'</span>], [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2014-02-19T14:30Z'</span>), <span class="string">'0.3'</span>], [<span class="string">'baz'</span>, <span class="literal">null</span>, <span class="string">'qux'</span>]];</span><br><span class="line"><span class="keyword">var</span> buffer = xlsx.build([&#123;name: <span class="string">"mySheetName"</span>, data: data&#125;]); <span class="comment">// Returns a buffer</span></span><br></pre></td></tr></table></figure>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="Excel-转-Json"><a href="#Excel-转-Json" class="headerlink" title="Excel 转 Json"></a>Excel 转 Json</h4><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> xlsx = <span class="built_in">require</span>(<span class="string">"node-xlsx"</span>); </span><br><span class="line"><span class="built_in">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>); </span><br><span class="line"><span class="built_in">var</span> <span class="built_in">list</span> = xlsx.parse(<span class="string">"demo.xlsx"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">list</span>)); </span><br><span class="line"><span class="comment">//console.log(list); </span></span><br><span class="line">writeFile(<span class="string">"xlsx2json.json"</span>,<span class="built_in">JSON</span>.stringify(<span class="built_in">list</span>)); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">fileName,data</span>) </span>&#123; </span><br><span class="line">  fs.writeFile(fileName,data,<span class="string">'utf-8'</span>,complete);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">complete</span>(<span class="params">err</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">if</span>(!err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"文件生成成功"</span>); </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>demo.xlsx 内容如下<br><img src="http://source.lijundong.com/16-8-22/88488524.jpg" alt="demo.xlsx"><br>生成的 Json 格式如下<br><img src="http://source.lijundong.com/16-8-22/74481753.jpg" alt="xlsx2json"></p>
<h4 id="Json-转-Excel"><a href="#Json-转-Excel" class="headerlink" title="Json 转 Excel"></a>Json 转 Excel</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> xlsx = <span class="built_in">require</span>(<span class="string">'node-xlsx'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> data = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">null</span>, <span class="string">'sheetjs'</span>], [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2014-02-19T14:30Z'</span>), <span class="string">'0.3'</span>], [<span class="string">'baz'</span>, <span class="literal">null</span>, <span class="string">'qux'</span>]];</span><br><span class="line"><span class="keyword">var</span> buffer = xlsx.build([&#123;name:<span class="string">"mySheetName"</span>, data: data&#125;]); <span class="comment">// Returns a buffer</span></span><br><span class="line">writeFile(<span class="string">"all.xlsx"</span>,buffer); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">fileName,data</span>) </span>&#123; </span><br><span class="line">  fs.writeFile(fileName,data,<span class="string">'utf-8'</span>,complete);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">complete</span>(<span class="params">err</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">if</span>(!err) &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"文件生成成功"</span>); </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>demo.json 格式如下<br><img src="http://source.lijundong.com/16-8-22/31515580.jpg" alt="xlsx2json"><br>json2xlsx.xlsx 内容如下<br><img src="http://source.lijundong.com/16-8-22/44196162.jpg" alt="demo.xlsx"></p>
<p>通过上面的例子可以看出，Excel 的一行对应着一条 Json 数据，然而这种方式并不适合数据库与 Excel 之间的转换，所以需要对 Json 内容作转换。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;试想这样一种情况，一个不熟悉技术的人需要在网站中展示他存在 Excel 里的数据，数据量很大，人工操作很繁琐，且容易出错，如果要做到用户友好，程序的任务是读入 Excel，解析，以正确的格式存入数据库。&lt;br&gt;在 Java 环境下，可以用 &lt;code&gt;Apache POI&lt;/code&gt; 来操作 office 全家桶的读写，我不熟悉Java，所以这篇文章就记录下用 NodeJS 解析 Excel(xlsx 格式)数据为Json格式。&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="http://lijundong.com/categories/node/"/>
    
    
      <category term="node" scheme="http://lijundong.com/tags/node/"/>
    
      <category term="excel" scheme="http://lijundong.com/tags/excel/"/>
    
  </entry>
  
</feed>
